import React from 'react';
import { DefaultProps } from '../../types';
declare const Mention: {
    new (props: ({
        trigger?: any;
        h?: number | undefined;
        triggerLocation: "new-word-only" | "anywhere";
        onChangeText: (value: string) => void;
        triggerCallback: (lastKeyword: string) => void;
        children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
        onHide?: (() => void) | undefined;
        maxRow: number;
        renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
        ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
        ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
        columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
        data: readonly any[] | null | undefined;
        extraData?: any;
        getItemLayout?: ((data: any[] | null | undefined, index: number) => {
            length: number;
            offset: number;
            index: number;
        }) | undefined;
        horizontal?: boolean | null | undefined;
        initialNumToRender?: number | undefined;
        initialScrollIndex?: number | null | undefined;
        keyExtractor?: ((item: any, index: number) => string) | undefined;
        legacyImplementation?: boolean | undefined;
        numColumns?: number | undefined;
        onEndReached?: ((info: {
            distanceFromEnd: number;
        }) => void) | null | undefined;
        onEndReachedThreshold?: number | null | undefined;
        onRefresh?: (() => void) | null | undefined;
        onViewableItemsChanged?: ((info: {
            viewableItems: import("react-native").ViewToken[];
            changed: import("react-native").ViewToken[];
        }) => void) | null | undefined;
        refreshing?: boolean | null | undefined;
        viewabilityConfig?: any;
        removeClippedSubviews?: boolean | undefined;
        fadingEdgeLength?: number | undefined;
        debug?: boolean | undefined;
        disableVirtualization?: boolean | undefined;
        getItem?: ((data: any, index: number) => any) | undefined;
        getItemCount?: ((data: any) => number) | undefined;
        inverted?: boolean | null | undefined;
        listKey?: string | undefined;
        maxToRenderPerBatch?: number | undefined;
        onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
        onScrollToIndexFailed?: ((info: {
            index: number;
            highestMeasuredFrameIndex: number;
            averageItemLength: number;
        }) => void) | undefined;
        progressViewOffset?: number | undefined;
        renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
        updateCellsBatchingPeriod?: number | undefined;
        viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
        windowSize?: number | undefined;
        CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
        contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        decelerationRate?: number | "normal" | "fast" | undefined;
        invertStickyHeaders?: boolean | undefined;
        keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
        onContentSizeChange?: ((w: number, h: number) => void) | undefined;
        onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        pagingEnabled?: boolean | undefined;
        scrollEnabled?: boolean | undefined;
        showsHorizontalScrollIndicator?: boolean | undefined;
        showsVerticalScrollIndicator?: boolean | undefined;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
        snapToInterval?: number | undefined;
        snapToOffsets?: number[] | undefined;
        snapToStart?: boolean | undefined;
        snapToEnd?: boolean | undefined;
        stickyHeaderIndices?: number[] | undefined;
        disableIntervalMomentum?: boolean | undefined;
        disableScrollViewPanResponder?: boolean | undefined;
        hitSlop?: import("react-native").Insets | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
        testID?: string | undefined;
        nativeID?: string | undefined;
        collapsable?: boolean | undefined;
        needsOffscreenAlphaCompositing?: boolean | undefined;
        renderToHardwareTextureAndroid?: boolean | undefined;
        focusable?: boolean | undefined;
        shouldRasterizeIOS?: boolean | undefined;
        isTVSelectable?: boolean | undefined;
        hasTVPreferredFocus?: boolean | undefined;
        tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
        tvParallaxShiftDistanceX?: number | undefined;
        tvParallaxShiftDistanceY?: number | undefined;
        tvParallaxTiltAngle?: number | undefined;
        tvParallaxMagnification?: number | undefined;
        onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        accessible?: boolean | undefined;
        accessibilityActions?: readonly Readonly<{
            name: string;
            label?: string | undefined;
        }>[] | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
        accessibilityState?: import("react-native").AccessibilityState | undefined;
        accessibilityHint?: string | undefined;
        accessibilityValue?: import("react-native").AccessibilityValue | undefined;
        onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
        accessibilityElementsHidden?: boolean | undefined;
        accessibilityViewIsModal?: boolean | undefined;
        onAccessibilityEscape?: (() => void) | undefined;
        onAccessibilityTap?: (() => void) | undefined;
        onMagicTap?: (() => void) | undefined;
        accessibilityIgnoresInvertColors?: boolean | undefined;
        alwaysBounceHorizontal?: boolean | undefined;
        alwaysBounceVertical?: boolean | undefined;
        automaticallyAdjustContentInsets?: boolean | undefined;
        bounces?: boolean | undefined;
        bouncesZoom?: boolean | undefined;
        canCancelContentTouches?: boolean | undefined;
        centerContent?: boolean | undefined;
        contentInset?: import("react-native").Insets | undefined;
        contentOffset?: import("react-native").PointPropType | undefined;
        contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
        directionalLockEnabled?: boolean | undefined;
        indicatorStyle?: "default" | "black" | "white" | undefined;
        maintainVisibleContentPosition?: {
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | null | undefined;
        maximumZoomScale?: number | undefined;
        minimumZoomScale?: number | undefined;
        onScrollAnimationEnd?: (() => void) | undefined;
        pinchGestureEnabled?: boolean | undefined;
        scrollEventThrottle?: number | undefined;
        scrollIndicatorInsets?: import("react-native").Insets | undefined;
        scrollToOverflowEnabled?: boolean | undefined;
        scrollsToTop?: boolean | undefined;
        snapToAlignment?: "center" | "start" | "end" | undefined;
        onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        zoomScale?: number | undefined;
        endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
        scrollPerfTag?: string | undefined;
        overScrollMode?: "auto" | "never" | "always" | undefined;
        nestedScrollEnabled?: boolean | undefined;
        persistentScrollbar?: boolean | undefined;
        borderColor?: string | undefined;
        borderTopColor?: string | undefined;
        borderRightColor?: string | undefined;
        borderBottomColor?: string | undefined;
        borderLeftColor?: string | undefined;
        borderWidth?: number | undefined;
        borderTopWidth?: number | undefined;
        borderRightWidth?: number | undefined;
        borderLeftWidth?: number | undefined;
        borderBottomWidth?: number | undefined;
        borderStartWidth?: number | undefined;
        borderEndWidth?: number | undefined;
        borderStyle?: "solid" | "dotted" | "dashed" | undefined;
        m?: string | number | undefined;
        mt?: string | number | undefined;
        mr?: string | number | undefined;
        mb?: string | number | undefined;
        ml?: string | number | undefined;
        mx?: string | number | undefined;
        my?: string | number | undefined;
        ms?: string | number | undefined;
        p?: string | number | undefined;
        pt?: string | number | undefined;
        pr?: string | number | undefined;
        pb?: string | number | undefined;
        pl?: string | number | undefined;
        px?: string | number | undefined;
        py?: string | number | undefined;
        ps?: string | number | undefined;
        shadow?: string | number | undefined;
        shadowColor?: string | undefined;
        rounded?: string | number | undefined;
        roundedTopLeft?: string | number | undefined;
        roundedTopRight?: string | number | undefined;
        roundedBottomLeft?: string | number | undefined;
        roundedBottomRight?: string | number | undefined;
        roundedTop?: string | number | undefined;
        roundedLeft?: string | number | undefined;
        roundedRight?: string | number | undefined;
        roundedBottom?: string | number | undefined;
        position?: "absolute" | "relative" | undefined;
        top?: number | undefined;
        right?: number | undefined;
        bottom?: number | undefined;
        left?: number | undefined;
        loading?: boolean | undefined;
        bg?: string | undefined;
        variant?: string | undefined;
    } & import("../../types").VariantPropsType) | Readonly<{
        trigger?: any;
        h?: number | undefined;
        triggerLocation: "new-word-only" | "anywhere";
        onChangeText: (value: string) => void;
        triggerCallback: (lastKeyword: string) => void;
        children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
        onHide?: (() => void) | undefined;
        maxRow: number;
        renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
        ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
        ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
        columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
        data: readonly any[] | null | undefined;
        extraData?: any;
        getItemLayout?: ((data: any[] | null | undefined, index: number) => {
            length: number;
            offset: number;
            index: number;
        }) | undefined;
        horizontal?: boolean | null | undefined;
        initialNumToRender?: number | undefined;
        initialScrollIndex?: number | null | undefined;
        keyExtractor?: ((item: any, index: number) => string) | undefined;
        legacyImplementation?: boolean | undefined;
        numColumns?: number | undefined;
        onEndReached?: ((info: {
            distanceFromEnd: number;
        }) => void) | null | undefined;
        onEndReachedThreshold?: number | null | undefined;
        onRefresh?: (() => void) | null | undefined;
        onViewableItemsChanged?: ((info: {
            viewableItems: import("react-native").ViewToken[];
            changed: import("react-native").ViewToken[];
        }) => void) | null | undefined;
        refreshing?: boolean | null | undefined;
        viewabilityConfig?: any;
        removeClippedSubviews?: boolean | undefined;
        fadingEdgeLength?: number | undefined;
        debug?: boolean | undefined;
        disableVirtualization?: boolean | undefined;
        getItem?: ((data: any, index: number) => any) | undefined;
        getItemCount?: ((data: any) => number) | undefined;
        inverted?: boolean | null | undefined;
        listKey?: string | undefined;
        maxToRenderPerBatch?: number | undefined;
        onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
        onScrollToIndexFailed?: ((info: {
            index: number;
            highestMeasuredFrameIndex: number;
            averageItemLength: number;
        }) => void) | undefined;
        progressViewOffset?: number | undefined;
        renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
        updateCellsBatchingPeriod?: number | undefined;
        viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
        windowSize?: number | undefined;
        CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
        contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        decelerationRate?: number | "normal" | "fast" | undefined;
        invertStickyHeaders?: boolean | undefined;
        keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
        onContentSizeChange?: ((w: number, h: number) => void) | undefined;
        onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        pagingEnabled?: boolean | undefined;
        scrollEnabled?: boolean | undefined;
        showsHorizontalScrollIndicator?: boolean | undefined;
        showsVerticalScrollIndicator?: boolean | undefined;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
        snapToInterval?: number | undefined;
        snapToOffsets?: number[] | undefined;
        snapToStart?: boolean | undefined;
        snapToEnd?: boolean | undefined;
        stickyHeaderIndices?: number[] | undefined;
        disableIntervalMomentum?: boolean | undefined;
        disableScrollViewPanResponder?: boolean | undefined;
        hitSlop?: import("react-native").Insets | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
        testID?: string | undefined;
        nativeID?: string | undefined;
        collapsable?: boolean | undefined;
        needsOffscreenAlphaCompositing?: boolean | undefined;
        renderToHardwareTextureAndroid?: boolean | undefined;
        focusable?: boolean | undefined;
        shouldRasterizeIOS?: boolean | undefined;
        isTVSelectable?: boolean | undefined;
        hasTVPreferredFocus?: boolean | undefined;
        tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
        tvParallaxShiftDistanceX?: number | undefined;
        tvParallaxShiftDistanceY?: number | undefined;
        tvParallaxTiltAngle?: number | undefined;
        tvParallaxMagnification?: number | undefined;
        onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        accessible?: boolean | undefined;
        accessibilityActions?: readonly Readonly<{
            name: string;
            label?: string | undefined;
        }>[] | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
        accessibilityState?: import("react-native").AccessibilityState | undefined;
        accessibilityHint?: string | undefined;
        accessibilityValue?: import("react-native").AccessibilityValue | undefined;
        onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
        accessibilityElementsHidden?: boolean | undefined;
        accessibilityViewIsModal?: boolean | undefined;
        onAccessibilityEscape?: (() => void) | undefined;
        onAccessibilityTap?: (() => void) | undefined;
        onMagicTap?: (() => void) | undefined;
        accessibilityIgnoresInvertColors?: boolean | undefined;
        alwaysBounceHorizontal?: boolean | undefined;
        alwaysBounceVertical?: boolean | undefined;
        automaticallyAdjustContentInsets?: boolean | undefined;
        bounces?: boolean | undefined;
        bouncesZoom?: boolean | undefined;
        canCancelContentTouches?: boolean | undefined;
        centerContent?: boolean | undefined;
        contentInset?: import("react-native").Insets | undefined;
        contentOffset?: import("react-native").PointPropType | undefined;
        contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
        directionalLockEnabled?: boolean | undefined;
        indicatorStyle?: "default" | "black" | "white" | undefined;
        maintainVisibleContentPosition?: {
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | null | undefined;
        maximumZoomScale?: number | undefined;
        minimumZoomScale?: number | undefined;
        onScrollAnimationEnd?: (() => void) | undefined;
        pinchGestureEnabled?: boolean | undefined;
        scrollEventThrottle?: number | undefined;
        scrollIndicatorInsets?: import("react-native").Insets | undefined;
        scrollToOverflowEnabled?: boolean | undefined;
        scrollsToTop?: boolean | undefined;
        snapToAlignment?: "center" | "start" | "end" | undefined;
        onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        zoomScale?: number | undefined;
        endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
        scrollPerfTag?: string | undefined;
        overScrollMode?: "auto" | "never" | "always" | undefined;
        nestedScrollEnabled?: boolean | undefined;
        persistentScrollbar?: boolean | undefined;
        borderColor?: string | undefined;
        borderTopColor?: string | undefined;
        borderRightColor?: string | undefined;
        borderBottomColor?: string | undefined;
        borderLeftColor?: string | undefined;
        borderWidth?: number | undefined;
        borderTopWidth?: number | undefined;
        borderRightWidth?: number | undefined;
        borderLeftWidth?: number | undefined;
        borderBottomWidth?: number | undefined;
        borderStartWidth?: number | undefined;
        borderEndWidth?: number | undefined;
        borderStyle?: "solid" | "dotted" | "dashed" | undefined;
        m?: string | number | undefined;
        mt?: string | number | undefined;
        mr?: string | number | undefined;
        mb?: string | number | undefined;
        ml?: string | number | undefined;
        mx?: string | number | undefined;
        my?: string | number | undefined;
        ms?: string | number | undefined;
        p?: string | number | undefined;
        pt?: string | number | undefined;
        pr?: string | number | undefined;
        pb?: string | number | undefined;
        pl?: string | number | undefined;
        px?: string | number | undefined;
        py?: string | number | undefined;
        ps?: string | number | undefined;
        shadow?: string | number | undefined;
        shadowColor?: string | undefined;
        rounded?: string | number | undefined;
        roundedTopLeft?: string | number | undefined;
        roundedTopRight?: string | number | undefined;
        roundedBottomLeft?: string | number | undefined;
        roundedBottomRight?: string | number | undefined;
        roundedTop?: string | number | undefined;
        roundedLeft?: string | number | undefined;
        roundedRight?: string | number | undefined;
        roundedBottom?: string | number | undefined;
        position?: "absolute" | "relative" | undefined;
        top?: number | undefined;
        right?: number | undefined;
        bottom?: number | undefined;
        left?: number | undefined;
        loading?: boolean | undefined;
        bg?: string | undefined;
        variant?: string | undefined;
    } & import("../../types").VariantPropsType>): {
        context: import("../../theme/theme.context").ThemeContextType;
        render(): JSX.Element | (DefaultProps<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        }> & Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType> & Readonly<{
            children?: React.ReactNode;
        }>);
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextState: Readonly<{}>, nextContext: any): void;
    };
    new (props: {
        trigger?: any;
        h?: number | undefined;
        triggerLocation: "new-word-only" | "anywhere";
        onChangeText: (value: string) => void;
        triggerCallback: (lastKeyword: string) => void;
        children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
        onHide?: (() => void) | undefined;
        maxRow: number;
        renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
        ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
        ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
        ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
        columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
        data: readonly any[] | null | undefined;
        extraData?: any;
        getItemLayout?: ((data: any[] | null | undefined, index: number) => {
            length: number;
            offset: number;
            index: number;
        }) | undefined;
        horizontal?: boolean | null | undefined;
        initialNumToRender?: number | undefined;
        initialScrollIndex?: number | null | undefined;
        keyExtractor?: ((item: any, index: number) => string) | undefined;
        legacyImplementation?: boolean | undefined;
        numColumns?: number | undefined;
        onEndReached?: ((info: {
            distanceFromEnd: number;
        }) => void) | null | undefined;
        onEndReachedThreshold?: number | null | undefined;
        onRefresh?: (() => void) | null | undefined;
        onViewableItemsChanged?: ((info: {
            viewableItems: import("react-native").ViewToken[];
            changed: import("react-native").ViewToken[];
        }) => void) | null | undefined;
        refreshing?: boolean | null | undefined;
        viewabilityConfig?: any;
        removeClippedSubviews?: boolean | undefined;
        fadingEdgeLength?: number | undefined;
        debug?: boolean | undefined;
        disableVirtualization?: boolean | undefined;
        getItem?: ((data: any, index: number) => any) | undefined;
        getItemCount?: ((data: any) => number) | undefined;
        inverted?: boolean | null | undefined;
        listKey?: string | undefined;
        maxToRenderPerBatch?: number | undefined;
        onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
        onScrollToIndexFailed?: ((info: {
            index: number;
            highestMeasuredFrameIndex: number;
            averageItemLength: number;
        }) => void) | undefined;
        progressViewOffset?: number | undefined;
        renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
        updateCellsBatchingPeriod?: number | undefined;
        viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
        windowSize?: number | undefined;
        CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
        contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        decelerationRate?: number | "normal" | "fast" | undefined;
        invertStickyHeaders?: boolean | undefined;
        keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
        onContentSizeChange?: ((w: number, h: number) => void) | undefined;
        onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        pagingEnabled?: boolean | undefined;
        scrollEnabled?: boolean | undefined;
        showsHorizontalScrollIndicator?: boolean | undefined;
        showsVerticalScrollIndicator?: boolean | undefined;
        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
        refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
        snapToInterval?: number | undefined;
        snapToOffsets?: number[] | undefined;
        snapToStart?: boolean | undefined;
        snapToEnd?: boolean | undefined;
        stickyHeaderIndices?: number[] | undefined;
        disableIntervalMomentum?: boolean | undefined;
        disableScrollViewPanResponder?: boolean | undefined;
        hitSlop?: import("react-native").Insets | undefined;
        pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
        testID?: string | undefined;
        nativeID?: string | undefined;
        collapsable?: boolean | undefined;
        needsOffscreenAlphaCompositing?: boolean | undefined;
        renderToHardwareTextureAndroid?: boolean | undefined;
        focusable?: boolean | undefined;
        shouldRasterizeIOS?: boolean | undefined;
        isTVSelectable?: boolean | undefined;
        hasTVPreferredFocus?: boolean | undefined;
        tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
        tvParallaxShiftDistanceX?: number | undefined;
        tvParallaxShiftDistanceY?: number | undefined;
        tvParallaxTiltAngle?: number | undefined;
        tvParallaxMagnification?: number | undefined;
        onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
        onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
        accessible?: boolean | undefined;
        accessibilityActions?: readonly Readonly<{
            name: string;
            label?: string | undefined;
        }>[] | undefined;
        accessibilityLabel?: string | undefined;
        accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
        accessibilityState?: import("react-native").AccessibilityState | undefined;
        accessibilityHint?: string | undefined;
        accessibilityValue?: import("react-native").AccessibilityValue | undefined;
        onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
        accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
        importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
        accessibilityElementsHidden?: boolean | undefined;
        accessibilityViewIsModal?: boolean | undefined;
        onAccessibilityEscape?: (() => void) | undefined;
        onAccessibilityTap?: (() => void) | undefined;
        onMagicTap?: (() => void) | undefined;
        accessibilityIgnoresInvertColors?: boolean | undefined;
        alwaysBounceHorizontal?: boolean | undefined;
        alwaysBounceVertical?: boolean | undefined;
        automaticallyAdjustContentInsets?: boolean | undefined;
        bounces?: boolean | undefined;
        bouncesZoom?: boolean | undefined;
        canCancelContentTouches?: boolean | undefined;
        centerContent?: boolean | undefined;
        contentInset?: import("react-native").Insets | undefined;
        contentOffset?: import("react-native").PointPropType | undefined;
        contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
        directionalLockEnabled?: boolean | undefined;
        indicatorStyle?: "default" | "black" | "white" | undefined;
        maintainVisibleContentPosition?: {
            autoscrollToTopThreshold?: number | null | undefined;
            minIndexForVisible: number;
        } | null | undefined;
        maximumZoomScale?: number | undefined;
        minimumZoomScale?: number | undefined;
        onScrollAnimationEnd?: (() => void) | undefined;
        pinchGestureEnabled?: boolean | undefined;
        scrollEventThrottle?: number | undefined;
        scrollIndicatorInsets?: import("react-native").Insets | undefined;
        scrollToOverflowEnabled?: boolean | undefined;
        scrollsToTop?: boolean | undefined;
        snapToAlignment?: "center" | "start" | "end" | undefined;
        onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
        zoomScale?: number | undefined;
        endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
        scrollPerfTag?: string | undefined;
        overScrollMode?: "auto" | "never" | "always" | undefined;
        nestedScrollEnabled?: boolean | undefined;
        persistentScrollbar?: boolean | undefined;
        borderColor?: string | undefined;
        borderTopColor?: string | undefined;
        borderRightColor?: string | undefined;
        borderBottomColor?: string | undefined;
        borderLeftColor?: string | undefined;
        borderWidth?: number | undefined;
        borderTopWidth?: number | undefined;
        borderRightWidth?: number | undefined;
        borderLeftWidth?: number | undefined;
        borderBottomWidth?: number | undefined;
        borderStartWidth?: number | undefined;
        borderEndWidth?: number | undefined;
        borderStyle?: "solid" | "dotted" | "dashed" | undefined;
        m?: string | number | undefined;
        mt?: string | number | undefined;
        mr?: string | number | undefined;
        mb?: string | number | undefined;
        ml?: string | number | undefined;
        mx?: string | number | undefined;
        my?: string | number | undefined;
        ms?: string | number | undefined;
        p?: string | number | undefined;
        pt?: string | number | undefined;
        pr?: string | number | undefined;
        pb?: string | number | undefined;
        pl?: string | number | undefined;
        px?: string | number | undefined;
        py?: string | number | undefined;
        ps?: string | number | undefined;
        shadow?: string | number | undefined;
        shadowColor?: string | undefined;
        rounded?: string | number | undefined;
        roundedTopLeft?: string | number | undefined;
        roundedTopRight?: string | number | undefined;
        roundedBottomLeft?: string | number | undefined;
        roundedBottomRight?: string | number | undefined;
        roundedTop?: string | number | undefined;
        roundedLeft?: string | number | undefined;
        roundedRight?: string | number | undefined;
        roundedBottom?: string | number | undefined;
        position?: "absolute" | "relative" | undefined;
        top?: number | undefined;
        right?: number | undefined;
        bottom?: number | undefined;
        left?: number | undefined;
        loading?: boolean | undefined;
        bg?: string | undefined;
        variant?: string | undefined;
    } & import("../../types").VariantPropsType, context: any): {
        context: import("../../theme/theme.context").ThemeContextType;
        render(): JSX.Element | (DefaultProps<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        }> & Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType> & Readonly<{
            children?: React.ReactNode;
        }>);
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<{
            trigger?: any;
            h?: number | undefined;
            triggerLocation: "new-word-only" | "anywhere";
            onChangeText: (value: string) => void;
            triggerCallback: (lastKeyword: string) => void;
            children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>;
            onHide?: (() => void) | undefined;
            maxRow: number;
            renderItem: (rowData: import("react-native").ListRenderItemInfo<any>) => any;
            ItemSeparatorComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListEmptyComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListFooterComponentStyle?: import("react-native").ViewStyle | null | undefined;
            ListHeaderComponent?: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | React.ComponentClass<any, any> | React.FunctionComponent<any> | null | undefined;
            ListHeaderComponentStyle?: import("react-native").ViewStyle | null | undefined;
            columnWrapperStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            keyboardShouldPersistTaps?: boolean | "never" | "always" | "handled" | undefined;
            data: readonly any[] | null | undefined;
            extraData?: any;
            getItemLayout?: ((data: any[] | null | undefined, index: number) => {
                length: number;
                offset: number;
                index: number;
            }) | undefined;
            horizontal?: boolean | null | undefined;
            initialNumToRender?: number | undefined;
            initialScrollIndex?: number | null | undefined;
            keyExtractor?: ((item: any, index: number) => string) | undefined;
            legacyImplementation?: boolean | undefined;
            numColumns?: number | undefined;
            onEndReached?: ((info: {
                distanceFromEnd: number;
            }) => void) | null | undefined;
            onEndReachedThreshold?: number | null | undefined;
            onRefresh?: (() => void) | null | undefined;
            onViewableItemsChanged?: ((info: {
                viewableItems: import("react-native").ViewToken[];
                changed: import("react-native").ViewToken[];
            }) => void) | null | undefined;
            refreshing?: boolean | null | undefined;
            viewabilityConfig?: any;
            removeClippedSubviews?: boolean | undefined;
            fadingEdgeLength?: number | undefined;
            debug?: boolean | undefined;
            disableVirtualization?: boolean | undefined;
            getItem?: ((data: any, index: number) => any) | undefined;
            getItemCount?: ((data: any) => number) | undefined;
            inverted?: boolean | null | undefined;
            listKey?: string | undefined;
            maxToRenderPerBatch?: number | undefined;
            onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
            onScrollToIndexFailed?: ((info: {
                index: number;
                highestMeasuredFrameIndex: number;
                averageItemLength: number;
            }) => void) | undefined;
            progressViewOffset?: number | undefined;
            renderScrollComponent?: ((props: import("react-native").ScrollViewProps) => React.ReactElement<import("react-native").ScrollViewProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>) | undefined;
            updateCellsBatchingPeriod?: number | undefined;
            viewabilityConfigCallbackPairs?: import("react-native").ViewabilityConfigCallbackPairs | undefined;
            windowSize?: number | undefined;
            CellRendererComponent?: React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            contentContainerStyle?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            decelerationRate?: number | "normal" | "fast" | undefined;
            invertStickyHeaders?: boolean | undefined;
            keyboardDismissMode?: "none" | "interactive" | "on-drag" | undefined;
            onContentSizeChange?: ((w: number, h: number) => void) | undefined;
            onScroll?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollBeginDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onScrollEndDrag?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollEnd?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            onMomentumScrollBegin?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            pagingEnabled?: boolean | undefined;
            scrollEnabled?: boolean | undefined;
            showsHorizontalScrollIndicator?: boolean | undefined;
            showsVerticalScrollIndicator?: boolean | undefined;
            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
            refreshControl?: React.ReactElement<import("react-native").RefreshControlProps, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)> | undefined;
            snapToInterval?: number | undefined;
            snapToOffsets?: number[] | undefined;
            snapToStart?: boolean | undefined;
            snapToEnd?: boolean | undefined;
            stickyHeaderIndices?: number[] | undefined;
            disableIntervalMomentum?: boolean | undefined;
            disableScrollViewPanResponder?: boolean | undefined;
            hitSlop?: import("react-native").Insets | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            testID?: string | undefined;
            nativeID?: string | undefined;
            collapsable?: boolean | undefined;
            needsOffscreenAlphaCompositing?: boolean | undefined;
            renderToHardwareTextureAndroid?: boolean | undefined;
            focusable?: boolean | undefined;
            shouldRasterizeIOS?: boolean | undefined;
            isTVSelectable?: boolean | undefined;
            hasTVPreferredFocus?: boolean | undefined;
            tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
            tvParallaxShiftDistanceX?: number | undefined;
            tvParallaxShiftDistanceY?: number | undefined;
            tvParallaxTiltAngle?: number | undefined;
            tvParallaxMagnification?: number | undefined;
            onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
            onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
            accessible?: boolean | undefined;
            accessibilityActions?: readonly Readonly<{
                name: string;
                label?: string | undefined;
            }>[] | undefined;
            accessibilityLabel?: string | undefined;
            accessibilityRole?: "search" | "link" | "none" | "text" | "button" | "image" | "keyboardkey" | "adjustable" | "imagebutton" | "header" | "summary" | "alert" | "checkbox" | "combobox" | "menu" | "menubar" | "menuitem" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
            accessibilityState?: import("react-native").AccessibilityState | undefined;
            accessibilityHint?: string | undefined;
            accessibilityValue?: import("react-native").AccessibilityValue | undefined;
            onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
            accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
            importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
            accessibilityElementsHidden?: boolean | undefined;
            accessibilityViewIsModal?: boolean | undefined;
            onAccessibilityEscape?: (() => void) | undefined;
            onAccessibilityTap?: (() => void) | undefined;
            onMagicTap?: (() => void) | undefined;
            accessibilityIgnoresInvertColors?: boolean | undefined;
            alwaysBounceHorizontal?: boolean | undefined;
            alwaysBounceVertical?: boolean | undefined;
            automaticallyAdjustContentInsets?: boolean | undefined;
            bounces?: boolean | undefined;
            bouncesZoom?: boolean | undefined;
            canCancelContentTouches?: boolean | undefined;
            centerContent?: boolean | undefined;
            contentInset?: import("react-native").Insets | undefined;
            contentOffset?: import("react-native").PointPropType | undefined;
            contentInsetAdjustmentBehavior?: "never" | "always" | "automatic" | "scrollableAxes" | undefined;
            directionalLockEnabled?: boolean | undefined;
            indicatorStyle?: "default" | "black" | "white" | undefined;
            maintainVisibleContentPosition?: {
                autoscrollToTopThreshold?: number | null | undefined;
                minIndexForVisible: number;
            } | null | undefined;
            maximumZoomScale?: number | undefined;
            minimumZoomScale?: number | undefined;
            onScrollAnimationEnd?: (() => void) | undefined;
            pinchGestureEnabled?: boolean | undefined;
            scrollEventThrottle?: number | undefined;
            scrollIndicatorInsets?: import("react-native").Insets | undefined;
            scrollToOverflowEnabled?: boolean | undefined;
            scrollsToTop?: boolean | undefined;
            snapToAlignment?: "center" | "start" | "end" | undefined;
            onScrollToTop?: ((event: import("react-native").NativeSyntheticEvent<import("react-native").NativeScrollEvent>) => void) | undefined;
            zoomScale?: number | undefined;
            endFillColor?: string | typeof import("react-native").OpaqueColorValue | undefined;
            scrollPerfTag?: string | undefined;
            overScrollMode?: "auto" | "never" | "always" | undefined;
            nestedScrollEnabled?: boolean | undefined;
            persistentScrollbar?: boolean | undefined;
            borderColor?: string | undefined;
            borderTopColor?: string | undefined;
            borderRightColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            m?: string | number | undefined;
            mt?: string | number | undefined;
            mr?: string | number | undefined;
            mb?: string | number | undefined;
            ml?: string | number | undefined;
            mx?: string | number | undefined;
            my?: string | number | undefined;
            ms?: string | number | undefined;
            p?: string | number | undefined;
            pt?: string | number | undefined;
            pr?: string | number | undefined;
            pb?: string | number | undefined;
            pl?: string | number | undefined;
            px?: string | number | undefined;
            py?: string | number | undefined;
            ps?: string | number | undefined;
            shadow?: string | number | undefined;
            shadowColor?: string | undefined;
            rounded?: string | number | undefined;
            roundedTopLeft?: string | number | undefined;
            roundedTopRight?: string | number | undefined;
            roundedBottomLeft?: string | number | undefined;
            roundedBottomRight?: string | number | undefined;
            roundedTop?: string | number | undefined;
            roundedLeft?: string | number | undefined;
            roundedRight?: string | number | undefined;
            roundedBottom?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            top?: number | undefined;
            right?: number | undefined;
            bottom?: number | undefined;
            left?: number | undefined;
            loading?: boolean | undefined;
            bg?: string | undefined;
            variant?: string | undefined;
        } & import("../../types").VariantPropsType>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType: React.Context<import("../../theme/theme.context").ThemeContextType>;
};
export { Mention };
