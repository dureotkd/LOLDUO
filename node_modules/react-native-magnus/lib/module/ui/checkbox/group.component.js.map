{"version":3,"sources":["group.component.tsx"],"names":["CheckboxGroup","incomingProps","props","value","defaultValue","setValue","children","onChangeProp","onChange","propsValue","rest","optionValue","optionIndex","indexOf","newValue","push","splice","renderChildren","React","Children","map","child","cloneElement","checked"],"mappings":"8nBAAA,oDAEA,gEAEA,yC,yFAGA,GAAMA,CAAAA,aAA0D,CAAG,QAA7DA,CAAAA,aAA6D,CACjEC,aADiE,CAE9D,uBACH,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,eAAhB,CAAiCD,aAAjC,CAAgD,EAAhD,CAAd,CADG,cAGuB,uCAASC,KAAK,CAACC,KAAf,6CAAwBD,KAAK,CAACE,YAA9B,6BAA8C,EAA9C,CAHvB,qDAGID,KAHJ,eAGWE,QAHX,kBAKDC,CAAAA,QALC,CASCJ,KATD,CAKDI,QALC,CAMSC,YANT,CASCL,KATD,CAMDM,QANC,CAOMC,UAPN,CASCP,KATD,CAODC,KAPC,CAQEO,IARF,uCASCR,KATD,kCAiBH,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACG,WAAD,CAAsB,CACrC,GAAMC,CAAAA,WAAW,CAAGT,KAAK,CAACU,OAAN,CAAcF,WAAd,CAApB,CACA,GAAMG,CAAAA,QAAQ,iCAAOX,KAAP,CAAd,CAEA,GAAIS,WAAW,GAAK,CAAC,CAArB,CAAwB,CACtBE,QAAQ,CAACC,IAAT,CAAcJ,WAAd,EACD,CAFD,IAEO,CACLG,QAAQ,CAACE,MAAT,CAAgBJ,WAAhB,CAA6B,CAA7B,EACD,CAED,GAAI,EAAE,SAAWV,CAAAA,KAAb,CAAJ,CAAyB,CACvBG,QAAQ,CAACS,QAAD,CAAR,CACD,CAED,GAAIP,YAAJ,CAAkB,CAChBA,YAAY,CAACO,QAAD,CAAZ,CACD,CACF,CAjBD,CAsBA,GAAMG,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,MAAOC,CAAAA,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBd,QAAnB,CAA6B,SAACe,KAAD,CAA+B,CACjE,MAAOH,CAAAA,KAAK,CAACI,YAAN,CAAmBD,KAAnB,CAA0B,CAC/Bb,QAAQ,CAARA,QAD+B,CAE/Be,OAAO,CAAEpB,KAAK,CAACU,OAAN,CAAcQ,KAAK,CAACnB,KAAN,CAAYC,KAA1B,EAAmC,CAAC,CAFd,CAA1B,CAAP,CAID,CALM,CAAP,CAMD,CAPD,CASA,MAAO,qBAAC,QAAD,0BAASO,IAAT,mEAAgBO,cAAc,EAA9B,CAAP,CACD,CAnDD,C","sourcesContent":["import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nimport { Div } from '../div/div.component';\r\nimport { CheckboxGroupProps } from './checkbox.type';\r\n\r\nconst CheckboxGroup: React.FunctionComponent<CheckboxGroupProps> = (\r\n  incomingProps\r\n) => {\r\n  const props = useDefaultProps('CheckboxGroup', incomingProps, {});\r\n\r\n  const [value, setValue] = useState(props.value ?? props.defaultValue ?? []);\r\n  const {\r\n    children,\r\n    onChange: onChangeProp,\r\n    value: propsValue,\r\n    ...rest\r\n  } = props;\r\n\r\n  /**\r\n   * checks if checked value is already in the state or not,\r\n   * if it, remove it else add it\r\n   *\r\n   * @param value\r\n   */\r\n  const onChange = (optionValue: any) => {\r\n    const optionIndex = value.indexOf(optionValue);\r\n    const newValue = [...value];\r\n\r\n    if (optionIndex === -1) {\r\n      newValue.push(optionValue);\r\n    } else {\r\n      newValue.splice(optionIndex, 1);\r\n    }\r\n\r\n    if (!('value' in props)) {\r\n      setValue(newValue);\r\n    }\r\n\r\n    if (onChangeProp) {\r\n      onChangeProp(newValue);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * clones the children and add checked, onChange prop\r\n   */\r\n  const renderChildren = () => {\r\n    return React.Children.map(children, (child: React.ReactElement) => {\r\n      return React.cloneElement(child, {\r\n        onChange,\r\n        checked: value.indexOf(child.props.value) > -1,\r\n      });\r\n    });\r\n  };\r\n\r\n  return <Div {...rest}>{renderChildren()}</Div>;\r\n};\r\n\r\nexport { CheckboxGroup };\r\n"]}