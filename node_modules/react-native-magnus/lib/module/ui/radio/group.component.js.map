{"version":3,"sources":["group.component.tsx"],"names":["RadioGroup","incomingProps","props","value","defaultValue","setValue","children","onChangeProp","onChange","propsValue","rest","optionValue","renderChildren","React","Children","map","child","cloneElement","checked"],"mappings":"uhBAAA,oDAIA,yCACA,gE,sFAEA,GAAMA,CAAAA,UAAoD,CAAG,QAAvDA,CAAAA,UAAuD,CAC3DC,aAD2D,CAExD,uBACH,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,YAAhB,CAA8BD,aAA9B,CAA6C,EAA7C,CAAd,CADG,cAGuB,uCAASC,KAAK,CAACC,KAAf,6CAAwBD,KAAK,CAACE,YAA9B,6BAA8C,IAA9C,CAHvB,qDAGID,KAHJ,eAGWE,QAHX,kBAKDC,CAAAA,QALC,CASCJ,KATD,CAKDI,QALC,CAMSC,YANT,CASCL,KATD,CAMDM,QANC,CAOMC,UAPN,CASCP,KATD,CAODC,KAPC,CAQEO,IARF,uCASCR,KATD,kCAiBH,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACG,WAAD,CAAsB,CACrC,GAAI,EAAE,SAAWT,CAAAA,KAAb,CAAJ,CAAyB,CACvBG,QAAQ,CAACM,WAAD,CAAR,CACD,CAED,GAAIJ,YAAJ,CAAkB,CAChBA,YAAY,CAACI,WAAD,CAAZ,CACD,CACF,CARD,CAaA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,MAAOC,CAAAA,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBT,QAAnB,CAA6B,SAACU,KAAD,CAA+B,CACjE,MAAOH,CAAAA,KAAK,CAACI,YAAN,CAAmBD,KAAnB,CAA0B,CAC/BR,QAAQ,CAARA,QAD+B,CAE/BU,OAAO,CAAEf,KAAK,GAAKa,KAAK,CAACd,KAAN,CAAYC,KAFA,CAA1B,CAAP,CAID,CALM,CAAP,CAMD,CAPD,CASA,MAAO,qBAAC,QAAD,0BAASO,IAAT,mEAAgBE,cAAc,EAA9B,CAAP,CACD,CA1CD,C","sourcesContent":["import * as React from 'react';\r\nimport { useState } from 'react';\r\n\r\nimport { RadioGroupProps } from './radio.type';\r\nimport { Div } from '../div/div.component';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nconst RadioGroup: React.FunctionComponent<RadioGroupProps> = (\r\n  incomingProps\r\n) => {\r\n  const props = useDefaultProps('RadioGroup', incomingProps, {});\r\n\r\n  const [value, setValue] = useState(props.value ?? props.defaultValue ?? null);\r\n  const {\r\n    children,\r\n    onChange: onChangeProp,\r\n    value: propsValue,\r\n    ...rest\r\n  } = props;\r\n\r\n  /**\r\n   * checks if checked value is already in the state or not,\r\n   * if it, remove it else add it\r\n   *\r\n   * @param value\r\n   */\r\n  const onChange = (optionValue: any) => {\r\n    if (!('value' in props)) {\r\n      setValue(optionValue);\r\n    }\r\n\r\n    if (onChangeProp) {\r\n      onChangeProp(optionValue);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * clones the children and add checked, onChange prop\r\n   */\r\n  const renderChildren = () => {\r\n    return React.Children.map(children, (child: React.ReactElement) => {\r\n      return React.cloneElement(child, {\r\n        onChange,\r\n        checked: value === child.props.value,\r\n      });\r\n    });\r\n  };\r\n\r\n  return <Div {...rest}>{renderChildren()}</Div>;\r\n};\r\n\r\nexport { RadioGroup };\r\n"]}