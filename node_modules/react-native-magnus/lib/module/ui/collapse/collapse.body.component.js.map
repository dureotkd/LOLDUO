{"version":3,"sources":["collapse.body.component.tsx"],"names":["CollapseBody","incomingProps","props","bg","p","flexDir","flexWrap","rounded","shadow","shadowColor","position","bgMode","pointerEvents","row","borderStyle","expanded","children","startingHeight","animatedController","Animated","Value","current","bodySectionHeight","setBodySectionHeight","bodyHeight","interpolate","inputRange","outputRange","React","useEffect","timing","useNativeDriver","duration","toValue","easing","Easing","bezier","start","onLayout","e","height","nativeEvent","layout","overflow"],"mappings":"yaAAA,oDAEA,yCACA,gEACA,yC,iGAIA,GAAMA,CAAAA,YAAwD,CAAG,QAA3DA,CAAAA,YAA2D,CAC/DC,aAD+D,CAE5D,CACH,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,cAAhB,CAAgCD,aAAhC,CAA+C,CAC3DE,EAAE,CAAE,aADuD,CAE3DC,CAAC,CAAE,IAFwD,CAG3DC,OAAO,CAAE,QAHkD,CAI3DC,QAAQ,CAAE,QAJiD,CAK3DC,OAAO,CAAE,MALkD,CAM3DC,MAAM,CAAE,MANmD,CAO3DC,WAAW,CAAE,SAP8C,CAQ3DC,QAAQ,CAAE,UARiD,CAS3DC,MAAM,CAAE,OATmD,CAU3DC,aAAa,CAAE,MAV4C,CAW3DC,GAAG,CAAE,KAXsD,CAY3DC,WAAW,CAAE,OAZ8C,CAA/C,CAAd,CADG,GAgBKC,CAAAA,QAhBL,CAgB4Bb,KAhB5B,CAgBKa,QAhBL,CAgBeC,QAhBf,CAgB4Bd,KAhB5B,CAgBec,QAhBf,CAiBH,GAAMC,CAAAA,cAAc,CAAG,CAAvB,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,iBAAO,GAAIC,uBAASC,KAAb,CAAmB,CAAnB,CAAP,EAA8BC,OAAzD,CAnBG,cAoB+C,mBAChDJ,cADgD,CApB/C,qDAoBIK,iBApBJ,eAoBuBC,oBApBvB,eAwBH,GAAMC,CAAAA,UAAU,CAAGN,kBAAkB,CAACO,WAAnB,CAA+B,CAChDC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADoC,CAEhDC,WAAW,CAAE,CAAC,CAAD,CAAIL,iBAAJ,CAFmC,CAA/B,CAAnB,CAKAM,KAAK,CAACC,SAAN,CAAgB,UAAM,CACpB,GAAId,QAAJ,CAAc,CACZI,sBAASW,MAAT,CAAgBZ,kBAAhB,CAAoC,CAClCa,eAAe,CAAE,KADiB,CAElCC,QAAQ,CAAE,GAFwB,CAGlCC,OAAO,CAAE,CAHyB,CAIlCC,MAAM,CAAEC,oBAAOC,MAAP,CAAc,GAAd,CAAmB,GAAnB,CAAwB,GAAxB,CAA6B,CAA7B,CAJ0B,CAApC,EAKGC,KALH,GAMD,CAPD,IAOO,CACLlB,sBAASW,MAAT,CAAgBZ,kBAAhB,CAAoC,CAClCa,eAAe,CAAE,KADiB,CAElCC,QAAQ,CAAE,GAFwB,CAGlCC,OAAO,CAAE,CAHyB,CAIlCC,MAAM,CAAEC,oBAAOC,MAAP,CAAc,GAAd,CAAmB,GAAnB,CAAwB,GAAxB,CAA6B,CAA7B,CAJ0B,CAApC,EAKGC,KALH,GAMD,CACF,CAhBD,CAgBG,CAACnB,kBAAD,CAAqBH,QAArB,CAhBH,EAkBA,GAAMuB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,CAA0B,CACzC,GAAMC,CAAAA,MAAM,CAAGD,CAAC,CAACE,WAAF,CAAcC,MAAd,CAAqBF,MAApC,CACAjB,oBAAoB,CAACiB,MAAD,CAApB,CACD,CAHD,CAKA,MACE,qBAAC,qBAAD,CAAU,IAAV,EAAe,KAAK,CAAE,CAAEA,MAAM,CAAEhB,UAAV,CAAsBmB,QAAQ,CAAE,QAAhC,CAAtB,gEACE,oBAAC,QAAD,0BAASzC,KAAT,EAAgB,QAAQ,CAAEoC,QAA1B,iEACGtB,QADH,CADF,CADF,CAOD,CA7DD,C","sourcesContent":["import * as React from 'react';\r\nimport { useRef, useState } from 'react';\r\nimport { Animated, Easing, LayoutChangeEvent } from 'react-native';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\nimport { Div } from '../div/div.component';\r\n\r\nimport { CollapseBodyProps } from './collapse.type';\r\n\r\nconst CollapseBody: React.FunctionComponent<CollapseBodyProps> = (\r\n  incomingProps\r\n) => {\r\n  const props = useDefaultProps('CollapseBody', incomingProps, {\r\n    bg: 'transparent',\r\n    p: 'xl',\r\n    flexDir: 'column',\r\n    flexWrap: 'nowrap',\r\n    rounded: 'none',\r\n    shadow: 'none',\r\n    shadowColor: 'gray900',\r\n    position: 'relative',\r\n    bgMode: 'cover',\r\n    pointerEvents: 'auto',\r\n    row: false,\r\n    borderStyle: 'solid',\r\n  });\r\n\r\n  const { expanded, children } = props;\r\n  const startingHeight = 0;\r\n\r\n  const animatedController = useRef(new Animated.Value(0)).current;\r\n  const [bodySectionHeight, setBodySectionHeight] = useState<number>(\r\n    startingHeight\r\n  );\r\n\r\n  const bodyHeight = animatedController.interpolate({\r\n    inputRange: [0, 1],\r\n    outputRange: [0, bodySectionHeight],\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (expanded) {\r\n      Animated.timing(animatedController, {\r\n        useNativeDriver: false,\r\n        duration: 300,\r\n        toValue: 0,\r\n        easing: Easing.bezier(0.4, 0.0, 0.2, 1),\r\n      }).start();\r\n    } else {\r\n      Animated.timing(animatedController, {\r\n        useNativeDriver: false,\r\n        duration: 300,\r\n        toValue: 1,\r\n        easing: Easing.bezier(0.4, 0.0, 0.2, 1),\r\n      }).start();\r\n    }\r\n  }, [animatedController, expanded]);\r\n\r\n  const onLayout = (e: LayoutChangeEvent) => {\r\n    const height = e.nativeEvent.layout.height;\r\n    setBodySectionHeight(height);\r\n  };\r\n\r\n  return (\r\n    <Animated.View style={{ height: bodyHeight, overflow: 'hidden' }}>\r\n      <Div {...props} onLayout={onLayout}>\r\n        {children}\r\n      </Div>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\n// CollapseBody.defaultProps = {\r\n//   bg: 'transparent',\r\n//   p: 'xl',\r\n//   flexDir: 'column',\r\n//   flexWrap: 'nowrap',\r\n//   rounded: 'none',\r\n//   shadow: 'none',\r\n//   shadowColor: 'gray900',\r\n//   position: 'relative',\r\n//   bgMode: 'cover',\r\n//   pointerEvents: 'auto',\r\n//   row: false,\r\n//   borderStyle: 'solid',\r\n// };\r\n\r\nexport { CollapseBody };\r\n"]}