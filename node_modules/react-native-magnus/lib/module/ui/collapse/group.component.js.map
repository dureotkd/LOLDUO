{"version":3,"sources":["group.component.tsx"],"names":["CollapseGroup","incomingProps","props","defaultActive","activeId","setActiveId","children","onChangeProp","onChange","rest","optionId","renderChildren","React","Children","map","child","cloneElement","active","id"],"mappings":"0hBAAA,oDAEA,gEAEA,yC,yFAGA,GAAMA,CAAAA,aAA0D,CAAG,QAA7DA,CAAAA,aAA6D,CACjEC,aADiE,CAE9D,0BACH,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,eAAhB,CAAiCD,aAAjC,CAAgD,EAAhD,CAAd,CADG,cAG6B,yCAASC,KAAK,CAACC,aAAf,6DAAgC,IAAhC,CAH7B,qDAGIC,QAHJ,eAGcC,WAHd,kBAIKC,CAAAA,QAJL,CAImDJ,KAJnD,CAIKI,QAJL,CAIyBC,YAJzB,CAImDL,KAJnD,CAIeM,QAJf,CAI0CC,IAJ1C,uCAImDP,KAJnD,0BAYH,GAAMM,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACE,QAAD,CAAmB,CAClCL,WAAW,CAACK,QAAQ,GAAKN,QAAb,CAAwB,IAAxB,CAA+BM,QAAhC,CAAX,CAEA,GAAIH,YAAJ,CAAkB,CAChBA,YAAY,CAACG,QAAD,CAAZ,CACD,CACF,CAND,CAWA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,MAAOC,CAAAA,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBR,QAAnB,CAA6B,SAACS,KAAD,CAA+B,CACjE,MAAOH,CAAAA,KAAK,CAACI,YAAN,CAAmBD,KAAnB,CAA0B,CAC/BP,QAAQ,CAARA,QAD+B,CAE/BS,MAAM,CAAEb,QAAQ,GAAKW,KAAK,CAACb,KAAN,CAAYgB,EAFF,CAA1B,CAAP,CAID,CALM,CAAP,CAMD,CAPD,CASA,MAAO,qBAAC,QAAD,0BAAST,IAAT,mEAAgBE,cAAc,EAA9B,CAAP,CACD,CAnCD,C","sourcesContent":["import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nimport { Div } from '../div/div.component';\r\nimport { CollapseGroupProps } from './collapse.type';\r\n\r\nconst CollapseGroup: React.FunctionComponent<CollapseGroupProps> = (\r\n  incomingProps\r\n) => {\r\n  const props = useDefaultProps('CollapseGroup', incomingProps, {});\r\n\r\n  const [activeId, setActiveId] = useState(props.defaultActive ?? null);\r\n  const { children, onChange: onChangeProp, ...rest } = props;\r\n\r\n  /**\r\n   * checks if checked value is already in the state or not,\r\n   * if it, remove it else add it\r\n   *\r\n   * @param value\r\n   */\r\n  const onChange = (optionId: any) => {\r\n    setActiveId(optionId === activeId ? null : optionId);\r\n\r\n    if (onChangeProp) {\r\n      onChangeProp(optionId);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * clones the children and add checked, onChange prop\r\n   */\r\n  const renderChildren = () => {\r\n    return React.Children.map(children, (child: React.ReactElement) => {\r\n      return React.cloneElement(child, {\r\n        onChange,\r\n        active: activeId === child.props.id,\r\n      });\r\n    });\r\n  };\r\n\r\n  return <Div {...rest}>{renderChildren()}</Div>;\r\n};\r\n\r\nexport { CollapseGroup };\r\n"]}