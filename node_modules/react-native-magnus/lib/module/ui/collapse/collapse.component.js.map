{"version":3,"sources":["collapse.component.tsx"],"names":["Collapse","incomingProps","props","bg","flexDir","flexWrap","rounded","overflow","shadow","mt","shadowColor","position","bgMode","pointerEvents","row","borderStyle","defaultActive","children","active","onChange","id","rest","isActive","setIsActive","header","body","changeState","newState","React","Children","forEach","child","type","CollapseHeader","CollapseBody","Error","cloneElement","onPress","expanded","Body","Header","Group","CollapseGroup"],"mappings":"qhBAAA,oDAEA,0CACA,gEAEA,yCACA,uDACA,2DAEA,wC,4FAEA,GAAMA,CAAAA,QAA2C,CAAG,QAA9CA,CAAAA,QAA8C,CAACC,aAAD,CAAmB,CACrE,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,UAAhB,CAA4BD,aAA5B,CAA2C,CACvDE,EAAE,CAAE,OADmD,CAEvDC,OAAO,CAAE,QAF8C,CAGvDC,QAAQ,CAAE,QAH6C,CAIvDC,OAAO,CAAE,IAJ8C,CAKvDC,QAAQ,CAAE,QAL6C,CAMvDC,MAAM,CAAE,MAN+C,CAOvDC,EAAE,CAAE,IAPmD,CAQvDC,WAAW,CAAE,SAR0C,CASvDC,QAAQ,CAAE,UAT6C,CAUvDC,MAAM,CAAE,OAV+C,CAWvDC,aAAa,CAAE,MAXwC,CAYvDC,GAAG,CAAE,KAZkD,CAavDC,WAAW,CAAE,OAb0C,CAcvDC,aAAa,CAAE,KAdwC,CAA3C,CAAd,CADqE,GAkB7DC,CAAAA,QAlB6D,CAkBFf,KAlBE,CAkB7De,QAlB6D,CAkBnDD,aAlBmD,CAkBFd,KAlBE,CAkBnDc,aAlBmD,CAkBpCE,MAlBoC,CAkBFhB,KAlBE,CAkBpCgB,MAlBoC,CAkB5BC,QAlB4B,CAkBFjB,KAlBE,CAkB5BiB,QAlB4B,CAkBlBC,EAlBkB,CAkBFlB,KAlBE,CAkBlBkB,EAlBkB,CAkBXC,IAlBW,uCAkBFnB,KAlBE,sEAmBrC,mBAASgB,MAAT,SAASA,MAAT,UAASA,MAAT,CAAmBF,aAAnB,CAnBqC,qDAmB9DM,QAnB8D,eAmBpDC,WAnBoD,eAoBrE,GAAIC,CAAAA,MAAM,CAAG,IAAb,CACA,GAAIC,CAAAA,IAAI,CAAG,IAAX,CAEA,oBAAU,UAAM,CACd,GAAI,UAAYvB,CAAAA,KAAhB,CAAuB,mBACrBqB,WAAW,gBAACrB,KAAK,CAACgB,MAAP,+CAAiB,KAAjB,CAAX,CACD,CACF,CAJD,CAIG,CAAChB,KAAD,CAJH,EAMA,GAAMwB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAuB,CACzCJ,WAAW,CAACI,QAAD,CAAX,CAEA,GAAI,0BAAWR,QAAX,CAAJ,CAA0B,CACxBA,QAAQ,CAACC,EAAD,CAAR,CACD,CACF,CAND,CAQAQ,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBb,QAAvB,CAAiC,SAACc,KAAD,CAAW,CAE1C,GAAIA,KAAK,CAACC,IAAN,GAAeC,8BAAnB,CAAmC,CACjCT,MAAM,CAAGO,KAAT,CAED,CAHD,IAGO,IAAIA,KAAK,CAACC,IAAN,GAAeE,0BAAnB,CAAiC,CACtCT,IAAI,CAAGM,KAAP,CACD,CACF,CARD,EAUA,GAAIP,MAAM,GAAK,IAAf,CAAqB,CACnB,KAAMW,CAAAA,KAAK,CACT,qHADS,CAAX,CAGD,CAEDX,MAAM,CAAGI,KAAK,CAACQ,YAAN,CAAmBZ,MAAnB,CAA2B,CAClCN,MAAM,CAAEI,QAD0B,CAGlCe,OAAO,CAAE,kBAAM,CACbX,WAAW,CAAC,CAACJ,QAAF,CAAX,CACD,CALiC,CAA3B,CAAT,CAQA,MACE,qBAAC,QAAD,0BAASD,IAAT,kEACGG,MADH,CAEG,CAAC,CAACC,IAAF,EAAUG,KAAK,CAACQ,YAAN,CAAmBX,IAAnB,CAAyB,CAAEa,QAAQ,CAAE,CAAChB,QAAb,CAAzB,CAFb,CADF,CAMD,CAnED,C,0BAsFAtB,QAAQ,CAACuC,IAAT,CAAgBL,0BAAhB,CACAlC,QAAQ,CAACwC,MAAT,CAAkBP,8BAAlB,CACAjC,QAAQ,CAACyC,KAAT,CAAiBC,oBAAjB","sourcesContent":["import * as React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { isFunction } from '../../utilities';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nimport { Div } from '../div/div.component';\r\nimport { CollapseBody } from './collapse.body.component';\r\nimport { CollapseHeader } from './collapse.header.component';\r\nimport { CollapseProps, CompoundedCollapse } from './collapse.type';\r\nimport { CollapseGroup } from './group.component';\r\n\r\nconst Collapse: CompoundedCollapse<CollapseProps> = (incomingProps) => {\r\n  const props = useDefaultProps('Collapse', incomingProps, {\r\n    bg: 'white',\r\n    flexDir: 'column',\r\n    flexWrap: 'nowrap',\r\n    rounded: 'md',\r\n    overflow: 'hidden',\r\n    shadow: 'none',\r\n    mt: 'md',\r\n    shadowColor: 'gray900',\r\n    position: 'relative',\r\n    bgMode: 'cover',\r\n    pointerEvents: 'auto',\r\n    row: false,\r\n    borderStyle: 'solid',\r\n    defaultActive: false,\r\n  });\r\n\r\n  const { children, defaultActive, active, onChange, id, ...rest } = props;\r\n  const [isActive, setIsActive] = useState(active ?? defaultActive);\r\n  let header = null;\r\n  let body = null;\r\n\r\n  useEffect(() => {\r\n    if ('active' in props) {\r\n      setIsActive(props.active ?? false);\r\n    }\r\n  }, [props]);\r\n\r\n  const changeState = (newState: boolean) => {\r\n    setIsActive(newState);\r\n\r\n    if (isFunction(onChange)) {\r\n      onChange(id);\r\n    }\r\n  };\r\n\r\n  React.Children.forEach(children, (child) => {\r\n    // @ts-ignore\r\n    if (child.type === CollapseHeader) {\r\n      header = child;\r\n      // @ts-ignore\r\n    } else if (child.type === CollapseBody) {\r\n      body = child;\r\n    }\r\n  });\r\n\r\n  if (header === null) {\r\n    throw Error(\r\n      \"header wasn't found to be rendered. Please make sure you have wrapped an Collapse.Header in the Collapse Component.\"\r\n    );\r\n  }\r\n\r\n  header = React.cloneElement(header, {\r\n    active: isActive,\r\n\r\n    onPress: () => {\r\n      changeState(!isActive);\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Div {...rest}>\r\n      {header}\r\n      {!!body && React.cloneElement(body, { expanded: !isActive })}\r\n    </Div>\r\n  );\r\n};\r\n\r\n// Collapse.defaultProps = {\r\n//   bg: 'white',\r\n//   flexDir: 'column',\r\n//   flexWrap: 'nowrap',\r\n//   rounded: 'md',\r\n//   overflow: 'hidden',\r\n//   shadow: 'none',\r\n//   mt: 'md',\r\n//   shadowColor: 'gray900',\r\n//   position: 'relative',\r\n//   bgMode: 'cover',\r\n//   pointerEvents: 'auto',\r\n//   row: false,\r\n//   borderStyle: 'solid',\r\n//   defaultActive: false,\r\n// };\r\n\r\nCollapse.Body = CollapseBody;\r\nCollapse.Header = CollapseHeader;\r\nCollapse.Group = CollapseGroup;\r\n\r\nexport { Collapse };\r\n"]}