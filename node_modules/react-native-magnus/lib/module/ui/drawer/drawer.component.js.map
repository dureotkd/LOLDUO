{"version":3,"sources":["drawer.component.tsx"],"names":["Drawer","React","forwardRef","incomingProps","ref","props","drawerPercentage","animationTime","bg","backdropColor","direction","rounded","backdropTransitionOutTiming","animationInTiming","animationIn","animationOut","onBackdropPress","isVisible","animationOutTiming","swipeDirection","onSwipeComplete","children","rest","theme","computedStyle","visible","setVisible","open","close","colors","drawer","container","safeView"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport Modal from 'react-native-modal';\r\nimport { SafeAreaView, View } from 'react-native';\r\nimport { useState, useImperativeHandle, useEffect } from 'react';\r\n\r\nimport { getStyle } from './drawer.style';\r\nimport { useTheme } from '../../theme';\r\nimport { DrawerProps, DrawerRef } from './drawer.type';\r\nimport { getThemeColor } from '../../theme/theme.service';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nconst Drawer = React.forwardRef<DrawerRef, DrawerProps>(\r\n  (incomingProps, ref) => {\r\n    const props = useDefaultProps('Drawer', incomingProps, {\r\n      drawerPercentage: 70,\r\n      animationTime: 300,\r\n      bg: 'white',\r\n      backdropColor: 'black',\r\n      direction: 'left',\r\n      rounded: 'none',\r\n      backdropTransitionOutTiming: 0,\r\n    });\r\n\r\n    const {\r\n      direction,\r\n      drawerPercentage,\r\n      animationTime,\r\n      backdropColor,\r\n      animationInTiming,\r\n      animationIn,\r\n      animationOut,\r\n      onBackdropPress,\r\n      isVisible,\r\n      animationOutTiming,\r\n      swipeDirection,\r\n      onSwipeComplete,\r\n      children,\r\n      ...rest\r\n    } = props;\r\n    const { theme } = useTheme();\r\n    const computedStyle = getStyle(theme, props as DrawerProps);\r\n    const [visible, setVisible] = useState(isVisible);\r\n\r\n    useEffect(() => {\r\n      if ('isVisible' in props) {\r\n        setVisible(props.isVisible ?? false);\r\n      }\r\n    }, [props, visible]);\r\n\r\n    /**\r\n     * exposing functions to parent\r\n     */\r\n    useImperativeHandle(ref, () => ({\r\n      open() {\r\n        setVisible(true);\r\n      },\r\n      close() {\r\n        setVisible(false);\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Modal\r\n        isVisible={visible}\r\n        onSwipeComplete={() => setVisible(false)}\r\n        swipeDirection={direction === 'left' ? 'left' : 'right'}\r\n        backdropColor={getThemeColor(theme.colors, backdropColor)}\r\n        animationInTiming={\r\n          animationInTiming ? animationInTiming : animationTime\r\n        }\r\n        animationOutTiming={\r\n          animationOutTiming ? animationOutTiming : animationTime\r\n        }\r\n        animationIn={direction === 'left' ? 'slideInLeft' : 'slideInRight'}\r\n        animationOut={direction === 'left' ? 'slideOutLeft' : 'slideOutRight'}\r\n        onBackdropPress={\r\n          'onBackdropPress' in props ? onBackdropPress : () => setVisible(false)\r\n        }\r\n        style={computedStyle.drawer}\r\n        {...rest}\r\n      >\r\n        <View style={computedStyle.container}>\r\n          <SafeAreaView style={computedStyle.safeView}>{children}</SafeAreaView>\r\n        </View>\r\n      </Modal>\r\n    );\r\n  }\r\n);\r\n\r\n// Drawer.defaultProps = {\r\n//   drawerPercentage: 70,\r\n//   animationTime: 300,\r\n//   bg: 'white',\r\n//   backdropColor: 'black',\r\n//   direction: 'left',\r\n//   rounded: 'none',\r\n//   backdropTransitionOutTiming: 0,\r\n// };\r\n\r\nexport { Drawer };\r\n"]}