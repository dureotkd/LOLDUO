{"version":3,"sources":["select.option.component.tsx"],"names":["SelectOption","incomingProps","props","onSelect","rounded","bg","px","py","color","alignItems","justifyContent","center","prefix","children","value","onPressProp","onPress","selectedValue","rest","isSelected","Array","isArray","includes","event","renderPrefix","renderChildren"],"mappings":"6bAAA,oDAGA,yCACA,4CACA,4CAEA,kDACA,gE,+FAEA,GAAMA,CAAAA,YAAwD,CAAG,QAA3DA,CAAAA,YAA2D,CAC/DC,aAD+D,CAE5D,CACH,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,cAAhB,CAAgCD,aAAhC,CAA+C,CAC3DE,QAAQ,CAAE,mBAAM,CAAE,CADyC,CAE3DC,OAAO,CAAE,CAFkD,CAG3DC,EAAE,CAAE,OAHuD,CAI3DC,EAAE,CAAE,IAJuD,CAK3DC,EAAE,CAAE,IALuD,CAM3DC,KAAK,CAAE,OANoD,CAO3DC,UAAU,CAAE,YAP+C,CAQ3DC,cAAc,CAAE,YAR2C,CAS3DC,MAAM,CAAE,KATmD,CAU3DC,MAAM,CACJ,oBAAC,UAAD,EACE,IAAI,CAAC,sBADP,CAEE,UAAU,CAAC,UAFb,CAGE,QAAQ,CAAC,KAHX,CAIE,KAAK,CAAC,UAJR,CAKE,EAAE,CAAC,IALL,gEAXyD,CAA/C,CAAd,CADG,GAuBDC,CAAAA,QAvBC,CA8BCX,KA9BD,CAuBDW,QAvBC,CAwBDC,KAxBC,CA8BCZ,KA9BD,CAwBDY,KAxBC,CAyBDF,MAzBC,CA8BCV,KA9BD,CAyBDU,MAzBC,CA0BQG,WA1BR,CA8BCb,KA9BD,CA0BDc,OA1BC,CA2BDb,QA3BC,CA8BCD,KA9BD,CA2BDC,QA3BC,CA4BDc,aA5BC,CA8BCf,KA9BD,CA4BDe,aA5BC,CA6BEC,IA7BF,uCA8BChB,KA9BD,qEA+BH,GAAMiB,CAAAA,UAAU,CAAGC,KAAK,CAACC,OAAN,CAAcJ,aAAd,EACfA,aAAa,CAACK,QAAd,CAAuBR,KAAvB,CADe,CAEfG,aAAa,GAAKH,KAFtB,CASA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACO,KAAD,CAAoC,CAClD,GAAIpB,QAAJ,CAAc,CACZA,QAAQ,CAACW,KAAD,CAAR,CACD,CAED,GAAIC,WAAJ,CAAiB,CACfA,WAAW,CAACQ,KAAD,CAAX,CACD,CACF,CARD,CAaA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACzB,GAAIL,UAAJ,CAAgB,CACd,MAAOP,CAAAA,MAAP,CACD,CAED,MAAO,KAAP,CACD,CAND,CAQA,GAAMa,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAI,MAAOZ,CAAAA,QAAP,GAAoB,QAAxB,CAAkC,CAChC,MAAO,qBAAC,UAAD,kEAAOA,QAAP,CAAP,CACD,CAED,MAAOA,CAAAA,QAAP,CACD,CAND,CAQA,MACE,qBAAC,cAAD,0BAAYK,IAAZ,EAAkB,OAAO,CAAEF,OAA3B,CAAoC,KAAK,KAAzC,CAA0C,UAAU,CAAC,QAArD,iEACGJ,MAAM,EAAI,oBAAC,QAAD,EAAK,IAAI,CAAC,IAAV,iEAAgBY,YAAY,EAA5B,CADb,CAEE,oBAAC,QAAD,EAAK,IAAI,CAAE,CAAX,CAAc,EAAE,CAAC,aAAjB,gEACGC,cAAc,EADjB,CAFF,CADF,CAQD,CA/ED,C","sourcesContent":["import * as React from 'react';\r\nimport { GestureResponderEvent as RNGestureResponderEvent } from 'react-native';\r\n\r\nimport { Div } from '../div/div.component';\r\nimport { Icon } from '../icon/icon.component';\r\nimport { Text } from '../text/text.component';\r\nimport { SelectOptionProps } from './select.option.type';\r\nimport { Button } from '../button/button.component';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nconst SelectOption: React.FunctionComponent<SelectOptionProps> = (\r\n  incomingProps\r\n) => {\r\n  const props = useDefaultProps('SelectOption', incomingProps, {\r\n    onSelect: () => {},\r\n    rounded: 0,\r\n    bg: 'white',\r\n    px: 'xl',\r\n    py: 'lg',\r\n    color: 'black',\r\n    alignItems: 'flex-start',\r\n    justifyContent: 'flex-start',\r\n    center: false,\r\n    prefix: (\r\n      <Icon\r\n        name=\"ios-checkmark-circle\"\r\n        fontFamily=\"Ionicons\"\r\n        fontSize=\"2xl\"\r\n        color=\"green600\"\r\n        mr=\"md\"\r\n      />\r\n    ),\r\n  });\r\n\r\n  const {\r\n    children,\r\n    value,\r\n    prefix,\r\n    onPress: onPressProp,\r\n    onSelect,\r\n    selectedValue,\r\n    ...rest\r\n  } = props;\r\n  const isSelected = Array.isArray(selectedValue)\r\n    ? selectedValue.includes(value)\r\n    : selectedValue === value;\r\n\r\n  /**\r\n   * on press select option\r\n   *\r\n   * @param e\r\n   */\r\n  const onPress = (event: RNGestureResponderEvent) => {\r\n    if (onSelect) {\r\n      onSelect(value);\r\n    }\r\n\r\n    if (onPressProp) {\r\n      onPressProp(event);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * render suffix\r\n   */\r\n  const renderPrefix = () => {\r\n    if (isSelected) {\r\n      return prefix;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const renderChildren = () => {\r\n    if (typeof children === 'string') {\r\n      return <Text>{children}</Text>;\r\n    }\r\n\r\n    return children;\r\n  };\r\n\r\n  return (\r\n    <Button {...rest} onPress={onPress} block alignItems=\"center\">\r\n      {prefix && <Div minW=\"8%\">{renderPrefix()}</Div>}\r\n      <Div flex={1} bg=\"transparent\">\r\n        {renderChildren()}\r\n      </Div>\r\n    </Button>\r\n  );\r\n};\r\n\r\n// Option.defaultProps = {\r\n//   onSelect: () => {},\r\n//   rounded: 0,\r\n//   bg: 'white',\r\n//   p: 0,\r\n//   color: 'black',\r\n//   alignItems: 'flex-start',\r\n//   justifyContent: 'flex-start',\r\n//   center: false,\r\n// };\r\n\r\nexport { SelectOption };\r\n"]}