{"version":3,"sources":["useKey.ts"],"names":["keyGenerator","Math","random","toString","substr","useKey","usedKeys","React","useRef","generateKey","foundUniqueKey","newKey","tries","current","includes","Date","now","floor","push","removeKey","key","filter","k"],"mappings":"iLAAA,oDAQA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAc,CACjC,0BAAoBC,IAAI,CAACC,MAAL,GACjBC,QADiB,CACR,EADQ,EAEjBC,MAFiB,CAEV,CAFU,CAEP,EAFO,CAApB,aAEoBH,IAAI,CAACC,MAAL,GACjBC,QADiB,CACR,EADQ,EAEjBC,MAFiB,CAEV,CAFU,CAEP,EAFO,CAFpB,aAIoBH,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,CAAqC,EAArC,CAJpB,EAKD,CAND,CASO,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAe,CACnC,GAAMC,CAAAA,QAAQ,CAAGC,KAAK,CAACC,MAAN,CAA4B,EAA5B,CAAjB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAc,CAChC,GAAIC,CAAAA,cAAc,CAAG,KAArB,CACA,GAAIC,CAAAA,MAAM,CAAG,EAAb,CACA,GAAIC,CAAAA,KAAK,CAAG,CAAZ,CAEA,MAAO,CAACF,cAAD,EAAmBE,KAAK,CAAG,CAAlC,CAAqC,CAEnCA,KAAK,GACLD,MAAM,CAAGX,YAAY,EAArB,CAEA,GAAI,CAACM,QAAQ,CAACO,OAAT,CAAiBC,QAAjB,CAA0BH,MAA1B,CAAL,CAAwC,CACtCD,cAAc,CAAG,IAAjB,CACD,CACF,CAGD,GAAI,CAACA,cAAL,CAAqB,CACnBC,MAAM,qBAAgBI,IAAI,CAACC,GAAL,EAAhB,aAA8Bf,IAAI,CAACgB,KAAL,CAAWhB,IAAI,CAACC,MAAL,GAAgB,IAA3B,CAA9B,CAAN,CACD,CAEDI,QAAQ,CAACO,OAAT,CAAiBK,IAAjB,CAAsBP,MAAtB,EACA,MAAOA,CAAAA,MAAP,CACD,CAtBD,CAyBA,GAAMQ,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,GAAD,CAAuB,CACvCd,QAAQ,CAACO,OAAT,CAAmBP,QAAQ,CAACO,OAAT,CAAiBQ,MAAjB,CAAwB,SAACC,CAAD,QAAOA,CAAAA,CAAC,GAAKF,GAAb,EAAxB,CAAnB,CACD,CAFD,CAIA,MAAO,CAAEX,WAAW,CAAXA,WAAF,CAAeU,SAAS,CAATA,SAAf,CAAP,CACD,CAjCM,C","sourcesContent":["import * as React from 'react';\r\n\r\ninterface IUseKey {\r\n  generateKey(): string;\r\n  removeKey(key: string): void;\r\n}\r\n\r\n// Generates a random key\r\nconst keyGenerator = (): string => {\r\n  return `portalize_${Math.random()\r\n    .toString(36)\r\n    .substr(2, 16)}-${Math.random()\r\n    .toString(36)\r\n    .substr(2, 16)}-${Math.random().toString(36).substr(2, 16)}`;\r\n};\r\n\r\n// Custom hook that checks for uniqueness and retries if clashes\r\nexport const useKey = (): IUseKey => {\r\n  const usedKeys = React.useRef<Array<string>>([]);\r\n\r\n  const generateKey = (): string => {\r\n    let foundUniqueKey = false;\r\n    let newKey = '';\r\n    let tries = 0;\r\n\r\n    while (!foundUniqueKey && tries < 3) {\r\n      // limit number of tries to stop endless loop of pain\r\n      tries++;\r\n      newKey = keyGenerator();\r\n\r\n      if (!usedKeys.current.includes(newKey)) {\r\n        foundUniqueKey = true;\r\n      }\r\n    }\r\n\r\n    // will only run if exited while loop without finding a unique key\r\n    if (!foundUniqueKey) {\r\n      newKey = `portalize_${Date.now()}_${Math.floor(Math.random() * 1000)}`; // fallback method\r\n    }\r\n\r\n    usedKeys.current.push(newKey);\r\n    return newKey;\r\n  };\r\n\r\n  // Removes our key to make it 'available' again\r\n  const removeKey = (key: string): void => {\r\n    usedKeys.current = usedKeys.current.filter((k) => k !== key);\r\n  };\r\n\r\n  return { generateKey, removeKey };\r\n};\r\n"]}