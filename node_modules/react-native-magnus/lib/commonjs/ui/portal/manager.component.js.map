{"version":3,"sources":["manager.component.tsx"],"names":["Manager","React","forwardRef","_","ref","useState","portals","setPortals","useImperativeHandle","mount","key","children","prev","update","map","item","unmount","filter","index","StyleSheet","absoluteFill"],"mappings":"miBAAA,oDACA,yC,k4BAQO,GAAMA,CAAAA,OAAO,CAAGC,KAAK,CAACC,UAAN,CAAiB,SAACC,CAAD,CAAIC,GAAJ,CAAiB,qBACzBH,KAAK,CAACI,QAAN,CAE5B,EAF4B,CADyB,iEAChDC,OADgD,qBACvCC,UADuC,qBAKvDN,KAAK,CAACO,mBAAN,CACEJ,GADF,CAEE,iBAAwB,CACtBK,KADsB,gBAChBC,GADgB,CACHC,QADG,CAC8B,CAClDJ,UAAU,CAAC,SAACK,IAAD,kDAAcA,IAAd,GAAoB,CAAEF,GAAG,CAAHA,GAAF,CAAOC,QAAQ,CAARA,QAAP,CAApB,IAAD,CAAV,CACD,CAHqB,CAKtBE,MALsB,iBAKfH,GALe,CAKFC,QALE,CAK+B,CACnDJ,UAAU,CAAC,SAACK,IAAD,QACTA,CAAAA,IAAI,CAACE,GAAL,CAAS,SAACC,IAAD,CAAU,CACjB,GAAIA,IAAI,CAACL,GAAL,GAAaA,GAAjB,CAAsB,CACpB,sCAAYK,IAAZ,MAAkBJ,QAAQ,CAARA,QAAlB,GACD,CAED,MAAOI,CAAAA,IAAP,CACD,CAND,CADS,EAAD,CAAV,CASD,CAfqB,CAiBtBC,OAjBsB,kBAiBdN,GAjBc,CAiBK,CACzBH,UAAU,CAAC,SAACK,IAAD,QAAUA,CAAAA,IAAI,CAACK,MAAL,CAAY,SAACF,IAAD,QAAUA,CAAAA,IAAI,CAACL,GAAL,GAAaA,GAAvB,EAAZ,CAAV,EAAD,CAAV,CACD,CAnBqB,CAAxB,EAFF,EAyBA,MAAOJ,CAAAA,OAAO,CAACQ,GAAR,CAAY,cAAoBI,KAApB,KAAGR,CAAAA,GAAH,MAAGA,GAAH,CAAQC,QAAR,MAAQA,QAAR,OACjB,qBAAC,iBAAD,EACE,GAAG,sCAAgCD,GAAhC,aAAuCQ,KAAvC,CADL,CAEE,WAAW,CAAE,KAFf,CAGE,aAAa,CAAC,UAHhB,CAIE,KAAK,CAAEC,wBAAWC,YAJpB,gEAMGT,QANH,CADiB,EAAZ,CAAP,CAUD,CAxCsB,CAAhB,C","sourcesContent":["import * as React from 'react';\r\nimport { View, StyleSheet } from 'react-native';\r\n\r\nexport interface IManagerHandles {\r\n  mount(key: string, children: React.ReactNode): void;\r\n  update(key?: string, children?: React.ReactNode): void;\r\n  unmount(key?: string): void;\r\n}\r\n\r\nexport const Manager = React.forwardRef((_, ref): any => {\r\n  const [portals, setPortals] = React.useState<\r\n    { key: string; children: React.ReactNode }[]\r\n  >([]);\r\n\r\n  React.useImperativeHandle(\r\n    ref,\r\n    (): IManagerHandles => ({\r\n      mount(key: string, children: React.ReactNode): void {\r\n        setPortals((prev) => [...prev, { key, children }]);\r\n      },\r\n\r\n      update(key: string, children: React.ReactNode): void {\r\n        setPortals((prev) =>\r\n          prev.map((item) => {\r\n            if (item.key === key) {\r\n              return { ...item, children };\r\n            }\r\n\r\n            return item;\r\n          })\r\n        );\r\n      },\r\n\r\n      unmount(key: string): void {\r\n        setPortals((prev) => prev.filter((item) => item.key !== key));\r\n      },\r\n    })\r\n  );\r\n\r\n  return portals.map(({ key, children }, index: number) => (\r\n    <View\r\n      key={`react-native-magnus-portal-${key}-${index}`}\r\n      collapsable={false}\r\n      pointerEvents=\"box-none\"\r\n      style={StyleSheet.absoluteFill}\r\n    >\r\n      {children}\r\n    </View>\r\n  ));\r\n});\r\n"]}