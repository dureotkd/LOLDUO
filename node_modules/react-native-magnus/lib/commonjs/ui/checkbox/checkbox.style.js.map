{"version":3,"sources":["checkbox.style.tsx"],"names":["getStyle","theme","props","extraProps","computedStyle","button","justifyContent","alignItems","flexDirection","alignSelf","opacity","flex","zIndex","width","w","height","h","minWidth","minW","minHeight","minH","maxWidth","maxW","maxHeight","maxH","spacing","colors","borderRadius","backgroundColor","bg","text","fontWeight","color","fontSize","lineHeight","loadingContainer","loaderSize","container","flexDir","position","borderless","overflow","block","highlightContainer","focussed","highlightBg","left","top","icon","disabled","style","StyleSheet","create"],"mappings":"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","sourcesContent":["import { StyleSheet } from 'react-native';\r\nimport { ThemeType } from '../../theme';\r\n\r\nimport {\r\n  getThemeProperty,\r\n  createShadowStyles,\r\n  createSpacingStyles,\r\n  createPositionStyle,\r\n  createBorderRadiusStyles,\r\n  createBorderColorStyles,\r\n  createBorderWidthStyles,\r\n  getThemeColor,\r\n} from '../../theme/theme.service';\r\nimport { CheckboxProps, CheckboxStates } from './checkbox.type';\r\n\r\n/**\r\n * computed style\r\n *\r\n * @param theme\r\n * @param props\r\n */\r\nexport const getStyle = (\r\n  theme: ThemeType,\r\n  props: CheckboxProps,\r\n  extraProps: CheckboxStates\r\n) => {\r\n  const computedStyle: any = {};\r\n\r\n  computedStyle.button = {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    alignSelf: props.alignSelf,\r\n    opacity: props.opacity,\r\n    flex: props.flex,\r\n    zIndex: props.zIndex,\r\n    width: props.w,\r\n    height: props.h,\r\n    minWidth: props.minW,\r\n    minHeight: props.minH,\r\n    maxWidth: props.maxW,\r\n    maxHeight: props.maxH,\r\n    ...createPositionStyle(props),\r\n    ...createBorderWidthStyles(props),\r\n    ...createShadowStyles(props, theme),\r\n    ...createSpacingStyles(props, theme.spacing),\r\n    ...createBorderColorStyles(props, theme.colors),\r\n    ...createBorderRadiusStyles(props, theme.borderRadius),\r\n    backgroundColor: getThemeColor(theme.colors, props.bg),\r\n  };\r\n\r\n  computedStyle.text = {\r\n    fontWeight: props.fontWeight,\r\n    color: getThemeColor(theme.colors, props.color),\r\n    fontSize: getThemeProperty(theme.fontSize, props.fontSize),\r\n    lineHeight: getThemeProperty(theme.fontSize, props.fontSize) * 1.2,\r\n  };\r\n\r\n  computedStyle.loadingContainer = {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    minHeight: getThemeProperty(theme.fontSize, props.loaderSize) * 1.2,\r\n  };\r\n\r\n  computedStyle.container = {\r\n    flexDirection: props.flexDir,\r\n    alignItems: props.alignItems,\r\n    justifyContent: props.justifyContent,\r\n    position: 'relative',\r\n  };\r\n\r\n  if (props.borderless === false) {\r\n    computedStyle.button = {\r\n      ...computedStyle.button,\r\n      overflow: 'hidden',\r\n    };\r\n  }\r\n\r\n  if (props.block) {\r\n    computedStyle.container = {\r\n      ...computedStyle.container,\r\n      width: '100%',\r\n      alignSelf: 'stretch',\r\n    };\r\n\r\n    computedStyle.button = {\r\n      ...computedStyle.button,\r\n      alignSelf: 'stretch',\r\n    };\r\n  }\r\n\r\n  computedStyle.highlightContainer = {\r\n    backgroundColor: extraProps.focussed\r\n      ? getThemeColor(theme.colors, props.highlightBg)\r\n      : 'transparent',\r\n    height: getThemeProperty(theme.fontSize, props.fontSize) + 5,\r\n    width: getThemeProperty(theme.fontSize, props.fontSize) + 5,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    position: 'absolute',\r\n    left: -2.5,\r\n    top: -2.5,\r\n    ...createBorderRadiusStyles(props, theme.borderRadius),\r\n  };\r\n\r\n  computedStyle.icon = {\r\n    zIndex: 2,\r\n  };\r\n\r\n  if (props.disabled) {\r\n    computedStyle.icon = {\r\n      ...computedStyle.icon,\r\n      opacity: 0.5,\r\n    };\r\n  }\r\n  // merging style props to computed style\r\n  if (props.style) {\r\n    computedStyle.container = {\r\n      ...computedStyle.container,\r\n      // @ts-ignore\r\n      ...props.style,\r\n    };\r\n  }\r\n\r\n  return StyleSheet.create(computedStyle);\r\n};\r\n"]}