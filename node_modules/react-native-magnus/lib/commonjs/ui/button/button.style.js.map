{"version":3,"sources":["button.style.tsx"],"names":["getStyle","theme","props","computedStyle","button","justifyContent","alignItems","flexDirection","alignSelf","opacity","flex","zIndex","width","w","height","h","minWidth","minW","minHeight","minH","maxWidth","maxW","maxHeight","maxH","spacing","colors","borderRadius","backgroundColor","bg","loadingContainer","fontSize","loaderSize","container","flexDir","position","borderless","overflow","block","disabled","style","StyleSheet","create"],"mappings":"+QAAA,yCAGA,gD,yyBAkBO,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAmBC,KAAnB,CAA0C,CAChE,GAAMC,CAAAA,aAAkB,CAAG,EAA3B,CAEAA,aAAa,CAACC,MAAd,oGACEC,cAAc,CAAE,QADlB,CAEEC,UAAU,CAAE,QAFd,CAGEC,aAAa,CAAE,KAHjB,CAIEC,SAAS,CAAEN,KAAK,CAACM,SAJnB,CAKEC,OAAO,CAAEP,KAAK,CAACO,OALjB,CAMEC,IAAI,CAAER,KAAK,CAACQ,IANd,CAOEC,MAAM,CAAET,KAAK,CAACS,MAPhB,CAQEC,KAAK,CAAEV,KAAK,CAACW,CARf,CASEC,MAAM,CAAEZ,KAAK,CAACa,CAThB,CAUEC,QAAQ,CAAEd,KAAK,CAACe,IAVlB,CAWEC,SAAS,CAAEhB,KAAK,CAACiB,IAXnB,CAYEC,QAAQ,CAAElB,KAAK,CAACmB,IAZlB,CAaEC,SAAS,CAAEpB,KAAK,CAACqB,IAbnB,EAcK,+BAAoBrB,KAApB,CAdL,EAeK,mCAAwBA,KAAxB,CAfL,EAgBK,8BAAmBA,KAAnB,CAA0BD,KAA1B,CAhBL,EAiBK,+BAAoBC,KAApB,CAA2BD,KAAK,CAACuB,OAAjC,CAjBL,EAkBK,mCAAwBtB,KAAxB,CAA+BD,KAAK,CAACwB,MAArC,CAlBL,EAmBK,oCAAyBvB,KAAzB,CAAgCD,KAAK,CAACyB,YAAtC,CAnBL,MAoBEC,eAAe,CAAE,yBAAc1B,KAAK,CAACwB,MAApB,CAA4BvB,KAAK,CAAC0B,EAAlC,CApBnB,GAuBAzB,aAAa,CAAC0B,gBAAd,CAAiC,CAC/BvB,UAAU,CAAE,QADmB,CAE/BD,cAAc,CAAE,QAFe,CAG/Ba,SAAS,CAAE,4BAAiBjB,KAAK,CAAC6B,QAAvB,CAAiC5B,KAAK,CAAC6B,UAAvC,EAAqD,GAHjC,CAAjC,CAMA5B,aAAa,CAAC6B,SAAd,CAA0B,CACxBzB,aAAa,CAAEL,KAAK,CAAC+B,OADG,CAExB3B,UAAU,CAAEJ,KAAK,CAACI,UAFM,CAGxBD,cAAc,CAAEH,KAAK,CAACG,cAHE,CAIxB6B,QAAQ,CAAE,UAJc,CAA1B,CAOA,GAAIhC,KAAK,CAACiC,UAAN,GAAqB,KAAzB,CAAgC,CAC9BhC,aAAa,CAACC,MAAd,gCACKD,aAAa,CAACC,MADnB,MAEEgC,QAAQ,CAAE,QAFZ,GAID,CAED,GAAIlC,KAAK,CAACmC,KAAV,CAAiB,CACflC,aAAa,CAAC6B,SAAd,gCACK7B,aAAa,CAAC6B,SADnB,MAEEpB,KAAK,CAAE,MAFT,CAGEJ,SAAS,CAAE,SAHb,GAMAL,aAAa,CAACC,MAAd,gCACKD,aAAa,CAACC,MADnB,MAEEI,SAAS,CAAE,SAFb,GAID,CAED,GAAIN,KAAK,CAACoC,QAAV,CAAoB,CAClBnC,aAAa,CAACC,MAAd,gCACKD,aAAa,CAACC,MADnB,MAEEK,OAAO,CAAE,GAFX,GAID,CAGD,GAAIP,KAAK,CAACqC,KAAV,CAAiB,CACfpC,aAAa,CAAC6B,SAAd,gCACK7B,aAAa,CAAC6B,SADnB,EAGK9B,KAAK,CAACqC,KAHX,EAKD,CAED,MAAOC,yBAAWC,MAAX,CAAkBtC,aAAlB,CAAP,CACD,CA5EM,C","sourcesContent":["import { StyleSheet } from 'react-native';\r\nimport { ThemeType } from '../../theme';\r\n\r\nimport {\r\n  getThemeProperty,\r\n  createShadowStyles,\r\n  createSpacingStyles,\r\n  createPositionStyle,\r\n  createBorderRadiusStyles,\r\n  createBorderColorStyles,\r\n  createBorderWidthStyles,\r\n  getThemeColor,\r\n} from '../../theme/theme.service';\r\nimport { ButtonProps } from './button.type';\r\n\r\n/**\r\n * computed style\r\n *\r\n * @param theme\r\n * @param props\r\n */\r\nexport const getStyle = (theme: ThemeType, props: ButtonProps) => {\r\n  const computedStyle: any = {};\r\n\r\n  computedStyle.button = {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    flexDirection: 'row',\r\n    alignSelf: props.alignSelf,\r\n    opacity: props.opacity,\r\n    flex: props.flex,\r\n    zIndex: props.zIndex,\r\n    width: props.w,\r\n    height: props.h,\r\n    minWidth: props.minW,\r\n    minHeight: props.minH,\r\n    maxWidth: props.maxW,\r\n    maxHeight: props.maxH,\r\n    ...createPositionStyle(props),\r\n    ...createBorderWidthStyles(props),\r\n    ...createShadowStyles(props, theme),\r\n    ...createSpacingStyles(props, theme.spacing),\r\n    ...createBorderColorStyles(props, theme.colors),\r\n    ...createBorderRadiusStyles(props, theme.borderRadius),\r\n    backgroundColor: getThemeColor(theme.colors, props.bg),\r\n  };\r\n\r\n  computedStyle.loadingContainer = {\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    minHeight: getThemeProperty(theme.fontSize, props.loaderSize) * 1.2,\r\n  };\r\n\r\n  computedStyle.container = {\r\n    flexDirection: props.flexDir,\r\n    alignItems: props.alignItems,\r\n    justifyContent: props.justifyContent,\r\n    position: 'relative',\r\n  };\r\n\r\n  if (props.borderless === false) {\r\n    computedStyle.button = {\r\n      ...computedStyle.button,\r\n      overflow: 'hidden',\r\n    };\r\n  }\r\n\r\n  if (props.block) {\r\n    computedStyle.container = {\r\n      ...computedStyle.container,\r\n      width: '100%',\r\n      alignSelf: 'stretch',\r\n    };\r\n\r\n    computedStyle.button = {\r\n      ...computedStyle.button,\r\n      alignSelf: 'stretch',\r\n    };\r\n  }\r\n\r\n  if (props.disabled) {\r\n    computedStyle.button = {\r\n      ...computedStyle.button,\r\n      opacity: 0.5,\r\n    };\r\n  }\r\n\r\n  // merging style props to computed style\r\n  if (props.style) {\r\n    computedStyle.container = {\r\n      ...computedStyle.container,\r\n      // @ts-ignore\r\n      ...props.style,\r\n    };\r\n  }\r\n\r\n  return StyleSheet.create(computedStyle);\r\n};\r\n"]}