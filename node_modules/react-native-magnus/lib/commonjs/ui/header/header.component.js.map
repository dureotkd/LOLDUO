{"version":3,"sources":["header.component.tsx"],"names":["Header","incomingProps","props","minH","p","bg","rounded","flexDir","shadow","shadowColor","position","bgMode","pointerEvents","borderStyle","alignItems","alignment","fontWeight","fontSize","textTransform","children","prefix","suffix","rest","theme","computedStyle","renderChildren","getSpecificProps","textProps","text","getPrefix","center"],"mappings":"wiBAAA,oDACA,4CACA,sCACA,kCAEA,0CACA,kCACA,gEACA,yC,wFAEA,GAAMA,CAAAA,MAA4C,CAAG,QAA/CA,CAAAA,MAA+C,CAACC,aAAD,CAAmB,CACtE,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,QAAhB,CAA0BD,aAA1B,CAAyC,CACrDE,IAAI,CAAE,EAD+C,CAErDC,CAAC,CAAE,IAFkD,CAGrDC,EAAE,CAAE,OAHiD,CAIrDC,OAAO,CAAE,MAJ4C,CAKrDC,OAAO,CAAE,KAL4C,CAMrDC,MAAM,CAAE,IAN6C,CAOrDC,WAAW,CAAE,SAPwC,CAQrDC,QAAQ,CAAE,UAR2C,CASrDC,MAAM,CAAE,OAT6C,CAUrDC,aAAa,CAAE,MAVsC,CAWrDC,WAAW,CAAE,OAXwC,CAYrDC,UAAU,CAAE,QAZyC,CAarDC,SAAS,CAAE,MAb0C,CAcrDC,UAAU,CAAE,MAdyC,CAerDC,QAAQ,CAAE,IAf2C,CAgBrDC,aAAa,CAAE,WAhBsC,CAAzC,CAAd,CADsE,GAoB9DC,CAAAA,QApB8D,CAoBxBjB,KApBwB,CAoB9DiB,QApB8D,CAoBpDC,MApBoD,CAoBxBlB,KApBwB,CAoBpDkB,MApBoD,CAoB5CC,MApB4C,CAoBxBnB,KApBwB,CAoB5CmB,MApB4C,CAoBjCC,IApBiC,uCAoBxBpB,KApBwB,+CAsBpD,qBAtBoD,CAsB9DqB,KAtB8D,WAsB9DA,KAtB8D,CAuBtE,GAAMC,CAAAA,aAAa,CAAG,qBAASD,KAAT,CAAgBrB,KAAhB,CAAtB,CAKA,GAAMuB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAI,MAAON,CAAAA,QAAP,GAAoB,QAAxB,CAAkC,CAChC,MACE,qBAAC,UAAD,0BACMO,0CAAiBxB,KAAjB,yCAA2ByB,gBAA3B,GADN,EAEE,KAAK,CAAEH,aAAa,CAACI,IAFvB,iEAIGT,QAJH,CADF,CAQD,CAED,MAAOA,CAAAA,QAAP,CACD,CAbD,CAeA,GAAMU,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAI3B,KAAK,CAACa,SAAN,GAAoB,QAAxB,CAAkC,MAAOK,CAAAA,MAAP,CAClC,MAAOA,CAAAA,MAAP,SAAOA,MAAP,UAAOA,MAAP,CAAiB,oBAAC,QAAD,EAAK,EAAE,CAAC,IAAR,iEAAjB,CACD,CAHD,CAKA,MACE,qBAAC,QAAD,0BAASE,IAAT,kEACE,oBAAC,QAAD,EAAK,KAAK,CAAEE,aAAa,CAACJ,MAA1B,gEAAmCS,SAAS,EAA5C,CADF,CAEE,oBAAC,QAAD,EAAK,KAAK,CAAEL,aAAa,CAACM,MAA1B,gEAAmCL,cAAc,EAAjD,CAFF,CAGE,oBAAC,QAAD,EAAK,KAAK,CAAED,aAAa,CAACH,MAA1B,gEAAmCA,MAAnC,CAHF,CADF,CAOD,CAvDD,C","sourcesContent":["import * as React from 'react';\r\nimport { Text } from '../text/text.component';\r\nimport { getStyle } from './header.style';\r\nimport { useTheme } from '../../theme';\r\nimport { HeaderProps } from './header.type';\r\nimport { getSpecificProps } from '../../utilities';\r\nimport { textProps } from '../../types';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\nimport { Div } from '../div/div.component';\r\n\r\nconst Header: React.FunctionComponent<HeaderProps> = (incomingProps) => {\r\n  const props = useDefaultProps('Header', incomingProps, {\r\n    minH: 70,\r\n    p: 'lg',\r\n    bg: 'white',\r\n    rounded: 'none',\r\n    flexDir: 'row',\r\n    shadow: 'sm',\r\n    shadowColor: 'gray900',\r\n    position: 'relative',\r\n    bgMode: 'cover',\r\n    pointerEvents: 'auto',\r\n    borderStyle: 'solid',\r\n    alignItems: 'center',\r\n    alignment: 'left',\r\n    fontWeight: 'bold',\r\n    fontSize: 'lg',\r\n    textTransform: 'uppercase',\r\n  });\r\n\r\n  const { children, prefix, suffix, ...rest } = props;\r\n\r\n  const { theme } = useTheme();\r\n  const computedStyle = getStyle(theme, props);\r\n\r\n  /**\r\n   * renders children based on type\r\n   */\r\n  const renderChildren = () => {\r\n    if (typeof children === 'string') {\r\n      return (\r\n        <Text\r\n          {...getSpecificProps(props, ...textProps)}\r\n          style={computedStyle.text}\r\n        >\r\n          {children}\r\n        </Text>\r\n      );\r\n    }\r\n\r\n    return children;\r\n  };\r\n\r\n  const getPrefix = () => {\r\n    if (props.alignment === 'center') return prefix;\r\n    return prefix ?? <Div px=\"sm\" />;\r\n  };\r\n\r\n  return (\r\n    <Div {...rest}>\r\n      <Div style={computedStyle.prefix}>{getPrefix()}</Div>\r\n      <Div style={computedStyle.center}>{renderChildren()}</Div>\r\n      <Div style={computedStyle.suffix}>{suffix}</Div>\r\n    </Div>\r\n  );\r\n};\r\n\r\nexport { Header };\r\n"]}