{"version":3,"sources":["textarea.component.tsx"],"names":["Textarea","incomingProps","props","minH","p","borderColor","borderWidth","multiline","textAlignVertical","h","w","m","minW","suffix","prefix","style","onBlur","onFocus","children","focusBorderColor","rest","theme","isFocussed","setIsFocussed","computedStyle","onFocusInput","e","onBlurInput","container","input"],"mappings":"kiBAAA,oDAEA,yCAOA,oCAEA,kCACA,gE,yFAEA,GAAMA,CAAAA,QAAgD,CAAG,QAAnDA,CAAAA,QAAmD,CAACC,aAAD,CAAmB,CAC1E,GAAMC,CAAAA,KAAK,CAAG,qCAAgB,UAAhB,CAA4BD,aAA5B,CAA2C,CACvDE,IAAI,CAAE,GADiD,CAEvDC,CAAC,CAAE,IAFoD,CAGvDC,WAAW,CAAE,SAH0C,CAIvDC,WAAW,CAAE,CAJ0C,CAKvDC,SAAS,CAAE,IAL4C,CAMvDC,iBAAiB,CAAE,KANoC,CAA3C,CAAd,CAD0E,GAWxEC,CAAAA,CAXwE,CAwBtEP,KAxBsE,CAWxEO,CAXwE,CAYxEC,CAZwE,CAwBtER,KAxBsE,CAYxEQ,CAZwE,CAaxEC,CAbwE,CAwBtET,KAxBsE,CAaxES,CAbwE,CAcxER,IAdwE,CAwBtED,KAxBsE,CAcxEC,IAdwE,CAexES,IAfwE,CAwBtEV,KAxBsE,CAexEU,IAfwE,CAgBxEC,MAhBwE,CAwBtEX,KAxBsE,CAgBxEW,MAhBwE,CAiBxEC,MAjBwE,CAwBtEZ,KAxBsE,CAiBxEY,MAjBwE,CAkBxEC,KAlBwE,CAwBtEb,KAxBsE,CAkBxEa,KAlBwE,CAmBxEC,MAnBwE,CAwBtEd,KAxBsE,CAmBxEc,MAnBwE,CAoBxEC,OApBwE,CAwBtEf,KAxBsE,CAoBxEe,OApBwE,CAqBxEC,QArBwE,CAwBtEhB,KAxBsE,CAqBxEgB,QArBwE,CAsBxEC,gBAtBwE,CAwBtEjB,KAxBsE,CAsBxEiB,gBAtBwE,CAuBrEC,IAvBqE,uCAwBtElB,KAxBsE,uHAyBxD,qBAzBwD,CAyBlEmB,KAzBkE,WAyBlEA,KAzBkE,eA0BtC,mBAAS,KAAT,CA1BsC,qDA0BnEC,UA1BmE,eA0BvDC,aA1BuD,eA2B1E,GAAMC,CAAAA,aAAa,CAAG,oBAASH,KAAT,CAAgBnB,KAAhB,CAAuB,CAAEoB,UAAU,CAAVA,UAAF,CAAvB,CAAtB,CAKA,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,CAAD,CAAsD,CACzEH,aAAa,CAAC,IAAD,CAAb,CAEA,GAAIN,OAAJ,CAAa,CACXA,OAAO,CAACS,CAAD,CAAP,CACD,CACF,CAND,CAYA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACD,CAAD,CAAsD,CACxEH,aAAa,CAAC,KAAD,CAAb,CAEA,GAAIP,MAAJ,CAAY,CACVA,MAAM,CAACU,CAAD,CAAN,CACD,CACF,CAND,CAQA,MACE,qBAAC,iBAAD,EAAQ,KAAK,CAAEF,aAAa,CAACI,SAA7B,gEACE,oBAAC,sBAAD,wBACE,OAAO,CAAE,iBAACF,CAAD,QAAOD,CAAAA,YAAY,CAACC,CAAD,CAAnB,EADX,CAEE,MAAM,CAAE,gBAACA,CAAD,QAAOC,CAAAA,WAAW,CAACD,CAAD,CAAlB,EAFV,CAGE,KAAK,CAAEF,aAAa,CAACK,KAHvB,EAIMT,IAJN,kEADF,CADF,CAUD,CA9DD,C","sourcesContent":["import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport {\r\n  View as RNView,\r\n  NativeSyntheticEvent,\r\n  TextInputFocusEventData,\r\n  TextInput as RNTextInput,\r\n} from 'react-native';\r\n\r\nimport { getStyle } from './input.style';\r\nimport { TextareaProps } from './textarea.type';\r\nimport { useTheme } from '../../theme';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nconst Textarea: React.FunctionComponent<TextareaProps> = (incomingProps) => {\r\n  const props = useDefaultProps('Textarea', incomingProps, {\r\n    minH: 100,\r\n    p: 'lg',\r\n    borderColor: 'gray500',\r\n    borderWidth: 1,\r\n    multiline: true,\r\n    textAlignVertical: 'top',\r\n  });\r\n\r\n  const {\r\n    h,\r\n    w,\r\n    m,\r\n    minH,\r\n    minW,\r\n    suffix,\r\n    prefix,\r\n    style,\r\n    onBlur,\r\n    onFocus,\r\n    children,\r\n    focusBorderColor,\r\n    ...rest\r\n  } = props;\r\n  const { theme } = useTheme();\r\n  const [isFocussed, setIsFocussed] = useState(false);\r\n  const computedStyle = getStyle(theme, props, { isFocussed });\r\n\r\n  /**\r\n   * on focus input\r\n   */\r\n  const onFocusInput = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\r\n    setIsFocussed(true);\r\n\r\n    if (onFocus) {\r\n      onFocus(e);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * on blur input\r\n   * @param e\r\n   */\r\n  const onBlurInput = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\r\n    setIsFocussed(false);\r\n\r\n    if (onBlur) {\r\n      onBlur(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RNView style={computedStyle.container}>\r\n      <RNTextInput\r\n        onFocus={(e) => onFocusInput(e)}\r\n        onBlur={(e) => onBlurInput(e)}\r\n        style={computedStyle.input}\r\n        {...rest}\r\n      />\r\n    </RNView>\r\n  );\r\n};\r\n\r\n// Textarea.defaultProps = {\r\n//   minH: 100,\r\n//   p: 'lg',\r\n//   borderColor: 'gray500',\r\n//   borderWidth: 1,\r\n// };\r\n\r\nexport { Textarea };\r\n"]}