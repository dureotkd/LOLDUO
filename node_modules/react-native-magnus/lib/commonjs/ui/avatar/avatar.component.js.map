{"version":3,"sources":["avatar.component.tsx"],"names":["Avatar","incomingProps","props","bg","size","color","rounded","fontSize","fontWeight","shadow","shadowColor","position","zIndex","m","mt","mr","mb","ml","ms","p","pr","pt","pb","pl","style","roundedTop","roundedRight","roundedBottom","roundedLeft","children","borderColor","alignSelf","bottom","left","right","top","borderBottomColor","borderLeftColor","borderTopColor","borderRightColor","borderWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","borderTopWidth","borderEndWidth","opacity","source","rest","theme","computedStyle","renderContent","image","getSpecificProps","textProps","container","Group","AvatarGroup"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View as RNView, Image as RNImage } from 'react-native';\r\n\r\nimport { getStyle } from './avatar.style';\r\nimport { useTheme } from '../../theme';\r\nimport { AvatarGroup } from './avatar.group.component';\r\nimport { AvatarProps, CompoundedAvatar } from './avatar.type';\r\nimport { Text } from '../text/text.component';\r\nimport { getSpecificProps } from '../../utilities';\r\nimport { textProps } from '../../types';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nconst Avatar: CompoundedAvatar<AvatarProps> = (incomingProps) => {\r\n  const props = useDefaultProps('Avatar', incomingProps, {\r\n    bg: 'transparent',\r\n    size: 48,\r\n    color: 'gray500',\r\n    rounded: 'circle',\r\n    fontSize: 'md',\r\n    fontWeight: 'bold',\r\n    shadow: 'none',\r\n    shadowColor: 'gray500',\r\n    position: 'relative',\r\n    zIndex: 1,\r\n  });\r\n\r\n  const {\r\n    bg,\r\n    m,\r\n    mt,\r\n    mr,\r\n    mb,\r\n    ml,\r\n    ms,\r\n    p,\r\n    pr,\r\n    pt,\r\n    pb,\r\n    pl,\r\n    position,\r\n    style,\r\n    rounded,\r\n    roundedTop,\r\n    roundedRight,\r\n    roundedBottom,\r\n    roundedLeft,\r\n    children,\r\n    borderColor,\r\n    color,\r\n    fontSize,\r\n    size,\r\n    alignSelf,\r\n    bottom,\r\n    left,\r\n    right,\r\n    top,\r\n    borderBottomColor,\r\n    borderLeftColor,\r\n    borderTopColor,\r\n    borderRightColor,\r\n    borderWidth,\r\n    borderLeftWidth,\r\n    borderRightWidth,\r\n    borderBottomWidth,\r\n    borderTopWidth,\r\n    borderEndWidth,\r\n    shadow,\r\n    shadowColor,\r\n    opacity,\r\n    zIndex,\r\n    source,\r\n    ...rest\r\n  } = props;\r\n  const { theme } = useTheme();\r\n  const computedStyle = getStyle(theme, props);\r\n\r\n  /**\r\n   * render the content based on the props passed\r\n   */\r\n  const renderContent = () => {\r\n    if (source) {\r\n      return <RNImage source={source} style={computedStyle.image} />;\r\n    }\r\n\r\n    if (typeof children === 'string') {\r\n      return <Text {...getSpecificProps(props, ...textProps)}>{children}</Text>;\r\n    }\r\n\r\n    return children;\r\n  };\r\n\r\n  return (\r\n    <RNView style={computedStyle.container} {...rest}>\r\n      {renderContent()}\r\n    </RNView>\r\n  );\r\n};\r\n\r\n// Avatar.defaultProps = {\r\n//   bg: 'transparent',\r\n//   size: 48,\r\n//   color: 'gray500',\r\n//   rounded: 'circle',\r\n//   fontSize: 'md',\r\n//   shadow: 'none',\r\n//   shadowColor: 'gray500',\r\n//   position: 'relative',\r\n//   zIndex: 1,\r\n// };\r\n\r\nAvatar.Group = AvatarGroup;\r\n\r\nexport { Avatar };\r\n"]}