{"version":3,"sources":["toggle.component.tsx"],"names":["Toggle","incomingProps","props","w","h","onPress","activeBg","bg","on","circleBg","activeCircleBg","duration","rounded","disabled","m","mt","mr","mb","ml","ms","p","pr","pt","pb","pl","roundedTop","roundedRight","roundedBottom","roundedLeft","borderColor","borderBottomColor","borderLeftColor","borderTopColor","borderRightColor","borderWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","borderTopWidth","borderEndWidth","rest","Animated","Value","animXValue","theme","computedStyle","endPos","circlePosXEnd","circlePosXStart","prevSwitchOnRef","prevSwitchOn","current","runAnimation","animValue","fromValue","toValue","useNativeDriver","timing","start","container","backgroundColor","interpolate","inputRange","outputRange","colors","circle","transform","translateX"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Animated, TouchableOpacity } from 'react-native';\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\nimport { getStyle } from './toggle.style';\r\nimport { ToggleProps } from './toggle.type';\r\nimport { useTheme } from '../../theme';\r\nimport { getThemeColor } from '../../theme/theme.service';\r\nimport { useDefaultProps } from '../../utilities/useDefaultProps';\r\n\r\nconst Toggle: React.FC<ToggleProps> = (incomingProps) => {\r\n  const props = useDefaultProps('Toggle', incomingProps, {\r\n    w: 55,\r\n    h: 30,\r\n    onPress: (): void => {},\r\n    activeBg: 'green600',\r\n    bg: 'gray400',\r\n    on: false,\r\n    circleBg: 'white',\r\n    activeCircleBg: 'white',\r\n    duration: 300,\r\n    rounded: 'circle',\r\n    disabled: false,\r\n  });\r\n\r\n  const {\r\n    h,\r\n    w,\r\n    bg,\r\n    m,\r\n    mt,\r\n    mr,\r\n    mb,\r\n    ml,\r\n    ms,\r\n    p,\r\n    pr,\r\n    pt,\r\n    pb,\r\n    pl,\r\n    disabled,\r\n    rounded,\r\n    roundedTop,\r\n    roundedRight,\r\n    roundedBottom,\r\n    roundedLeft,\r\n    borderColor,\r\n    borderBottomColor,\r\n    borderLeftColor,\r\n    borderTopColor,\r\n    borderRightColor,\r\n    borderWidth,\r\n    borderLeftWidth,\r\n    borderRightWidth,\r\n    borderBottomWidth,\r\n    borderTopWidth,\r\n    borderEndWidth,\r\n    onPress,\r\n    activeBg,\r\n    circleBg,\r\n    activeCircleBg,\r\n    duration,\r\n    on,\r\n    ...rest\r\n  } = props;\r\n  const [animXValue] = useState(new Animated.Value(on ? 1 : 0));\r\n  const { theme } = useTheme();\r\n  const computedStyle = getStyle(theme, props);\r\n\r\n  const endPos = (w as number) - (h as number) + 3;\r\n  const circlePosXEnd = endPos;\r\n  const [circlePosXStart] = useState(3);\r\n\r\n  const prevSwitchOnRef = useRef<boolean>();\r\n  const prevSwitchOn = !!prevSwitchOnRef.current;\r\n\r\n  /**\r\n   *\r\n   */\r\n  useEffect(() => {\r\n    const runAnimation = (): void => {\r\n      const animValue = {\r\n        fromValue: on ? 0 : 1,\r\n        toValue: on ? 1 : 0,\r\n        duration,\r\n        useNativeDriver: false,\r\n      };\r\n      Animated.timing(animXValue, animValue).start();\r\n    };\r\n\r\n    prevSwitchOnRef.current = on;\r\n    if (prevSwitchOn !== on) {\r\n      runAnimation();\r\n    }\r\n  }, [animXValue, prevSwitchOn, on, duration]);\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={!disabled ? onPress : () => {}}\r\n      activeOpacity={0.5}\r\n      {...rest}\r\n    >\r\n      <Animated.View\r\n        style={[\r\n          computedStyle.container,\r\n          {\r\n            backgroundColor: animXValue.interpolate({\r\n              inputRange: [0, 1],\r\n              outputRange: [\r\n                getThemeColor(theme.colors, bg),\r\n                getThemeColor(theme.colors, activeBg),\r\n              ],\r\n            }),\r\n          },\r\n        ]}\r\n      >\r\n        <Animated.View\r\n          style={[\r\n            computedStyle.circle,\r\n            {\r\n              backgroundColor: animXValue.interpolate({\r\n                inputRange: [0, 1],\r\n                outputRange: [\r\n                  getThemeColor(theme.colors, circleBg),\r\n                  getThemeColor(theme.colors, activeCircleBg),\r\n                ],\r\n              }),\r\n            },\r\n            {\r\n              transform: [\r\n                {\r\n                  translateX: animXValue.interpolate({\r\n                    inputRange: [0, 1],\r\n                    outputRange: [\r\n                      circlePosXStart as string | number,\r\n                      circlePosXEnd as string | number,\r\n                    ] as string[] | number[],\r\n                  }),\r\n                },\r\n              ],\r\n            },\r\n          ]}\r\n        />\r\n      </Animated.View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\n// Toggle.defaultProps = {\r\n//   w: 55,\r\n//   h: 30,\r\n//   onPress: (): void => {},\r\n//   activeBg: 'green600',\r\n//   bg: 'gray400',\r\n//   on: false,\r\n//   circleBg: 'white',\r\n//   activeCircleBg: 'white',\r\n//   duration: 300,\r\n//   rounded: 'circle',\r\n//   disabled: false,\r\n// };\r\n\r\nexport { Toggle };\r\n"]}