{"version":3,"sources":["theme.service.ts"],"names":["createSpacingStyles","props","theme","propKeys","p","pt","pr","pb","pl","px","py","ps","m","mt","mr","mb","ml","mx","my","ms","computedStyle","Object","keys","map","propKey","styleProperty","getThemeProperty","getFontWeight","themeFontFamily","fontFamily","fontWeight","getThemeFontFamily","undefined","getThemeColor","themeColors","value","createBorderRadiusStyles","rounded","roundedTopLeft","roundedTopRight","roundedBottomLeft","roundedBottomRight","roundedTop","roundedLeft","roundedRight","roundedBottom","Array","forEach","property","createFlexStyles","flex","createBorderWidthStyles","borderWidth","borderStartWidth","borderEndWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","createBorderColorStyles","borderColor","borderTopColor","borderRightColor","borderLeftColor","borderBottomColor","createShadowStyles","shadow","shadowColor","colors","createPositionStyle","position","top","left","right","bottom"],"mappings":"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","sourcesContent":["import { ThemeType } from './type';\r\nimport { TextProps } from '../ui';\r\nimport { isValidColor } from '../utilities';\r\n\r\n/**\r\n * create spacing styles from object of style props passed to magnus component\r\n *\r\n * m=\"10\", mt=\"xl\"\r\n *\r\n * @param value\r\n * @param theme\r\n */\r\nexport const createSpacingStyles = (\r\n  props: any,\r\n  theme: ThemeType['spacing']\r\n) => {\r\n  let propKeys: any;\r\n\r\n  propKeys = {\r\n    p: 'padding',\r\n    pt: 'paddingTop',\r\n    pr: 'paddingRight',\r\n    pb: 'paddingBottom',\r\n    pl: 'paddingLeft',\r\n    px: 'paddingHorizontal',\r\n    py: 'paddingVertical',\r\n    ps: 'paddingStart',\r\n    m: 'margin',\r\n    mt: 'marginTop',\r\n    mr: 'marginRight',\r\n    mb: 'marginBottom',\r\n    ml: 'marginLeft',\r\n    mx: 'marginHorizontal',\r\n    my: 'marginVertical',\r\n    ms: 'marginStart',\r\n  };\r\n\r\n  const computedStyle: any = {};\r\n\r\n  Object.keys(propKeys).map((propKey: string) => {\r\n    const styleProperty = propKeys[propKey];\r\n\r\n    if (propKey in props) {\r\n      computedStyle[styleProperty] = getThemeProperty(theme, props[propKey]);\r\n    }\r\n  });\r\n\r\n  return computedStyle;\r\n};\r\n\r\n/**\r\n * get font weight font\r\n *\r\n * @param\r\n * @param fontFamily\r\n * @param fontWeight\r\n */\r\nexport const getFontWeight = (\r\n  themeFontFamily: ThemeType['fontFamily'],\r\n  fontFamily: TextProps['fontFamily'],\r\n  fontWeight: TextProps['fontWeight']\r\n) => {\r\n  if (fontFamily === '' || !fontWeight) {\r\n    return fontWeight;\r\n  }\r\n\r\n  if (themeFontFamily) {\r\n    if (typeof themeFontFamily[fontWeight] !== 'undefined') {\r\n      return 'normal';\r\n    }\r\n  }\r\n\r\n  if (!fontFamily) {\r\n    return fontWeight;\r\n  }\r\n\r\n  return 'normal';\r\n};\r\n\r\n/**\r\n * extract the fontFamily from theme\r\n\r\n * @param themeFontFamily\r\n * @param fontWeight\r\n */\r\nexport const getThemeFontFamily = (\r\n  themeFontFamily: ThemeType['fontFamily'],\r\n  fontWeight: TextProps['fontWeight'] = 'normal'\r\n): string | undefined => {\r\n  if (themeFontFamily) {\r\n    if (typeof themeFontFamily[fontWeight] !== 'undefined') {\r\n      return themeFontFamily[fontWeight];\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\n/**\r\n * extract the theme property from theme\r\n * if thereis no theme property in the value, return the value\r\n *\r\n * @param themeColors\r\n * @param value\r\n */\r\nexport const getThemeColor = (\r\n  themeColors: ThemeType['colors'],\r\n  value: string | undefined\r\n): string => {\r\n  if (themeColors && value) {\r\n    if (typeof themeColors[value] !== 'undefined') {\r\n      if (isValidColor(themeColors[value] as string)) {\r\n        return themeColors[value] as string;\r\n      }\r\n\r\n      return getThemeColor(themeColors, themeColors[value] as string);\r\n    }\r\n  }\r\n\r\n  return value as string;\r\n};\r\n\r\n/**\r\n * extract the theme property from theme\r\n * if thereis no theme property in the value, return the value\r\n *\r\n * @param theme\r\n * @param value\r\n */\r\nexport const getThemeProperty = (\r\n  theme:\r\n    | ThemeType['borderRadius']\r\n    | ThemeType['fontSize']\r\n    | ThemeType['shadow']\r\n    | ThemeType['spacing']\r\n    | undefined,\r\n  value: any\r\n) => {\r\n  if (theme) {\r\n    if (typeof theme[value] !== 'undefined') {\r\n      return theme[value];\r\n    }\r\n  }\r\n  return value;\r\n};\r\n\r\n/**\r\n * borderRadius=\"xl\"\r\n *\r\n * @param value\r\n * @param theme\r\n */\r\nexport const createBorderRadiusStyles = (\r\n  props: any,\r\n  theme: ThemeType['borderRadius']\r\n) => {\r\n  let propKeys: any;\r\n\r\n  propKeys = {\r\n    rounded: 'borderRadius',\r\n    roundedTopLeft: 'borderTopLeftRadius',\r\n    roundedTopRight: 'borderTopRightRadius',\r\n    roundedBottomLeft: 'borderBottomLeftRadius',\r\n    roundedBottomRight: 'borderBottomRightRadius',\r\n    roundedTop: ['borderTopLeftRadius', 'borderTopRightRadius'],\r\n    roundedLeft: ['borderTopLeftRadius', 'borderBottomLeftRadius'],\r\n    roundedRight: ['borderTopRightRadius', 'borderBottomRightRadius'],\r\n    roundedBottom: ['borderBottomLeftRadius', 'borderBottomRightRadius'],\r\n  };\r\n\r\n  const computedStyle: any = {};\r\n\r\n  Object.keys(propKeys).map((propKey: string) => {\r\n    const styleProperty = propKeys[propKey];\r\n\r\n    if (propKey in props) {\r\n      if (styleProperty instanceof Array) {\r\n        styleProperty.forEach((property) => {\r\n          computedStyle[property] = getThemeProperty(theme, props[propKey]);\r\n        });\r\n      } else {\r\n        computedStyle[styleProperty] = getThemeProperty(theme, props[propKey]);\r\n      }\r\n    }\r\n  });\r\n\r\n  return computedStyle;\r\n};\r\n\r\n/**\r\n * adds flex property in styles\r\n *\r\n * @param props\r\n */\r\nexport const createFlexStyles = (props: any) => {\r\n  let propKeys: any;\r\n\r\n  propKeys = {\r\n    flex: 'flex',\r\n  };\r\n\r\n  const computedStyle: any = {};\r\n\r\n  Object.keys(propKeys).map((propKey: string) => {\r\n    const styleProperty = propKeys[propKey];\r\n\r\n    if (propKey in props) {\r\n      computedStyle[styleProperty] = props[propKey];\r\n    }\r\n  });\r\n\r\n  return computedStyle;\r\n};\r\n\r\n/**\r\n * create borderWidth styles\r\n *\r\n * @param value\r\n */\r\nexport const createBorderWidthStyles = (props: any) => {\r\n  let propKeys: any;\r\n\r\n  propKeys = {\r\n    borderWidth: 'borderWidth',\r\n    borderStartWidth: 'borderStartWidth',\r\n    borderEndWidth: 'borderEndWidth',\r\n    borderTopWidth: 'borderTopWidth',\r\n    borderLeftWidth: 'borderLeftWidth',\r\n    borderRightWidth: 'borderRightWidth',\r\n    borderBottomWidth: 'borderBottomWidth',\r\n  };\r\n\r\n  const computedStyle: any = {};\r\n\r\n  Object.keys(propKeys).map((propKey: string) => {\r\n    const styleProperty = propKeys[propKey];\r\n\r\n    if (propKey in props) {\r\n      computedStyle[styleProperty] = props[propKey];\r\n    }\r\n  });\r\n\r\n  return computedStyle;\r\n};\r\n\r\n/**\r\n * create borderRadius styles\r\n *\r\n * @param value\r\n */\r\nexport const createBorderColorStyles = (\r\n  props: any,\r\n  theme: ThemeType['colors']\r\n) => {\r\n  let propKeys: any;\r\n\r\n  propKeys = {\r\n    borderColor: 'borderColor',\r\n    borderTopColor: 'borderTopColor',\r\n    borderRightColor: 'borderRightColor',\r\n    borderLeftColor: 'borderLeftColor',\r\n    borderBottomColor: 'borderBottomColor',\r\n  };\r\n\r\n  const computedStyle: any = {};\r\n\r\n  Object.keys(propKeys).map((propKey: string) => {\r\n    const styleProperty = propKeys[propKey];\r\n\r\n    if (propKey in props) {\r\n      if (styleProperty instanceof Array) {\r\n        styleProperty.forEach((property) => {\r\n          computedStyle[property] = getThemeColor(theme, props[propKey]);\r\n        });\r\n      } else {\r\n        computedStyle[styleProperty] = getThemeColor(theme, props[propKey]);\r\n      }\r\n    }\r\n  });\r\n\r\n  return computedStyle;\r\n};\r\n\r\n/**\r\n * adds shadows property in styles\r\n *\r\n * @param props\r\n */\r\nexport const createShadowStyles = (props: any, theme: ThemeType) => {\r\n  let computedStyle: any = {};\r\n\r\n  if (props.shadow) {\r\n    computedStyle = {\r\n      ...(theme.shadow && theme.shadow[props.shadow]),\r\n      shadowColor: getThemeColor(theme.colors, props.shadowColor),\r\n    };\r\n  }\r\n\r\n  return computedStyle;\r\n};\r\n\r\n/**\r\n * position=\"absolute\"\r\n * top={10}\r\n *\r\n * @param value\r\n */\r\nexport const createPositionStyle = (props: any) => {\r\n  let propKeys: any;\r\n\r\n  propKeys = {\r\n    position: 'position',\r\n    top: 'top',\r\n    left: 'left',\r\n    right: 'right',\r\n    bottom: 'bottom',\r\n  };\r\n\r\n  const computedStyle: any = {};\r\n\r\n  Object.keys(propKeys).map((propKey: string) => {\r\n    const styleProperty = propKeys[propKey];\r\n\r\n    if (propKey in props) {\r\n      computedStyle[styleProperty] = props[propKey];\r\n    }\r\n  });\r\n\r\n  return computedStyle;\r\n};\r\n"]}